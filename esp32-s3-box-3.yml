# 本配置文件各项功能基本正常，并在源配置文件基础上做出以下修改：
# 1、修改主机IP
# 2、修改文字消息显示时间
# 3、修改雷达探测距离
substitutions:
  name: esp32-s3box-3
  friendly_name: ESP32-S3-Box-3-oam2
  #Default Images
  loading_illustration_file: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/loading_lvgl.png
  idle_illustration_file: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/idle.png
  listening_illustration_file: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/listening.png
  thinking_illustration_file: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/thinking.png
  replying_illustration_file: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/replying.png
  error_illustration_file: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/error.png
  timer_finished_illustration_file: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/timer_finished_320_240.png
  logo_illustration_file: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/logo.png
  
  # Animated Voice Assistant images
  anim_listening1: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/HAL/listening_1.png #listening
  anim_listening2: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/HAL/listening_2.png #listening, thinking
  anim_thinking1: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/HAL/thinking_1.png #thinking
  anim_thinking2: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/HAL/thinking_2.png #thinking, replying
  anim_replying1: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/HAL/replying_1.png #replying
  anim_replying2: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/HAL/replying_2.png #replying
  anim_error1: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/HAL/error_1.png #error
  anim2_listening: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/Home/g_grey.jpg
  anim2_thinking: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/Home/g_white.jpg
  anim2_replying1: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/Home/g_colors_1.jpg
  anim2_replying2: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/Home/g_colors_2.jpg
  anim2_replying3: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/Home/g_colors_3.jpg
  anim2_replying4: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/Home/g_colors_4.jpg
  anim2_error: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/images/Home/g_orange.jpg
  
  loading_illustration_background_color: "000000"
  idle_illustration_background_color: "000000"
  listening_illustration_background_color: "FFFFFF"
  thinking_illustration_background_color: "FFFFFF"
  replying_illustration_background_color: "FFFFFF"
  error_illustration_background_color: "000000"

  voice_assist_idle_phase_id: "1"
  voice_assist_listening_phase_id: "2"
  voice_assist_thinking_phase_id: "3"
  voice_assist_replying_phase_id: "4"
  voice_assist_not_ready_phase_id: "10"
  voice_assist_error_phase_id: "11"
  voice_assist_muted_phase_id: "12"
  voice_assist_timer_finished_phase_id: "20"
  voice_assist_timer_finishing_phase_id: "30"
  
  external_media_player: your_media_player  ##change this to your external media player enity_id: do not include media_player.
  home_assistant_host: http://192.168.0.242:8123 ##change to the full url or IP of your HA server including port
  tts_voice_speed: "24000" #options #nabu casa "24000" #piper "16000" elevenlabs "44100" must include quotes

###### Fonts & Icons ######
  font_glyphs: '&@!"''%()+=,-_.:°/$€£¥?0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyzÀàÁáÂâÃãÄäĀāĂăÅåǺǻẠạĄąÆæǼǽĆćĈĉČčĊċÇçĎďĐđÐðÈèÉéÊêẼẽĚěËëĒēĔĕĖėẸẹĘęĜĝǦǧĞğĠġĢģĤĥĦħıÌìÍíÎîĨĩÏïĪīĬĭİỊịĮįȷĴĵĶķĸĹĺĽľĻļŁłĿŀŃńÑñŇňŅņƝɲŊŋŉÒòÓóÔôÕõÖöŌōŎŏŐőỌọǪǫØøǾǿŒœŔŕŘřŖŗŚśŜŝŠšŞşȘșẞßŤťŢţȚțŦŧÞþÙùÚúÛûŨũÜüŪūŬŭŮůŰűỤụŲųẀẁẂẃŴŵẄẅỲỳÝýŶŷỸỹŸÿȲȳŹźŽžŻżĲĳƏə 一是不人在他有这上们来到时大地为子中你说生国年着就那和要她出也得里后自以会家可下而过天去能对小多然于心学之都好看起发当没成只如事把还用第样道想作种开美总从无情己面最女但现前些所同日手又行意动方期它头经长儿回位分爱老因很给名法间知世什两次使身者被高已亲其进此话常与活正感见明问力理点文几定本公特做外孩相西果走将月十实向声车全信重三机工物气每并别真打太新比才便夫再书部水像眼等体却加电主界门利海受听表德少代员许先口由安写性光白或住难望教命花结乐色更拉东神记处让母父应直字场平报友关放至张认接告入笑内军民岁往何度山觉路带万男边解叫任金快原吃妈变通师立象数四失满战远格士音轻目条呢病始达深完今提求清王化空业思切怎非找片罗钱语元喜曾离飞科言干流欢约各即指合反题必论交终林请医晚制球决传画保读运及则房早院量苦火布品近坐产答星精视连司奇管类未且台夜青北队久越观落尽形影红爸百令周吧识步希术留市半热送兴造谈容极随演收首根讲整式取照办强石古华拿计装似足双妻转诉米称丽客南领节衣站黑刻统断福城故历惊脸选包紧争另建维绝树系伤示愿持千史谁准联妇纪基买志静阿诗独复痛消社算义竟确酒需单治卡幸念举仅钟怕共毛句息功官待究跟穿室易游程号居考突皮哪费倒价图具刚脑永歌响商礼细专黄块脚味灵改据般破引食仍存众注笔甚某沉血备习校默务土微娘须试怀料调广苏显赛查密议底列富梦错座参八除跑亮假印设线温虽掉京初养香停际致阳纸李纳验助激够严证帝饭忘趣支春集丈木研班普导顿睡展跳获艺六波察群皇段急庭创区奥器谢弟店否害草排背止组州朝封睛板角况曲馆育忙质河续哥呼若推境遇雨标姐充围案伦护冷警贝著雪索剧啊船险依斗值帮汉慢佛肯闻唱沙局伯族低玩资屋击速顾泪洲团圣旁堂兵七露园牛哭旅街劳型烈姑陈莫鱼异抱宝权简态级票怪寻杀律胜份汽右洋范床舞秘午登楼贵吸责例追较职属渐左录丝牙党继托赶章智冲叶胡吉卖坚喝肉遗救修松临藏担戏善卫药悲敢靠伊村戴词森耳差短祖云规窗散迷油旧适乡架恩投弹铁博雷府压超负杂醒洗采毫嘴毕九冰既状乱景席珍童顶派素脱农疑练野按犯拍征坏骨余承置彩灯巨琴免环暗换技翻束增忍餐洛塞缺忆判欧层付阵玛批岛项狗休懂武革良恶恋委拥妙探呀营退摇弄桌熟诺宣银势奖宫忽套康供优课鸟喊降夏困刘罪亡鞋健模败伴守挥鲜财孤枪禁恐伙杰迹妹遍盖副坦牌江顺秋萨菜划授归浪听凡预奶雄升编典袋莱含盛济蒙棋端腿招释烧误智控网联蓝牙遥感器锁窗帘暖冷模式问候谢再见晚安睡跑买卖爸妈哥姐弟妹家室温湿风速播报查询预约关掉开启调节节能省电安全监控语音助手'
  font_file: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/fonts/consola.ttf
  icon_font_file: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/fonts/materialdesignicons-webfont.ttf
#Note: LVGL includes it's own font montserrat which contains a limited set of core icons.
###########################

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.6.0
  name_add_mac_suffix: false
  on_boot:
    priority: 600
    then:
      - delay: 5s
      - lvgl.widget.hide: boot_screen
      - at581x.settings:
          id: "Radar"
          sensing_distance: 1000
          stage_gain: 10
      - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
      - lambda: id(time_remaining_0).publish_state ("0:00:00");
      - script.execute: draw_display
      - if:
          condition:
            switch.is_on: output_audio
          then:
            media_player.volume_set:
              id: speaker_media_player
              volume: 0
      - delay: 30s
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
            - script.execute: draw_display

  project:
    name: "Christian.s3box3"
    version: "2025.07.23"

esp32:
  board: esp32s3box
  flash_size: 16MB
  cpu_frequency: 240MHz
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_ESP32S3_INSTRUCTION_CACHE_32KB: "y" 
      CONFIG_MBEDTLS_EXTERNAL_MEM_ALLOC: "y" 
      CONFIG_MBEDTLS_SSL_PROTO_TLS1_3: "y"

psram:
  mode: octal
  speed: 80MHz

api:
  on_client_connected:
    - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: draw_display

ota:
  - platform: esphome
    id: ota_esphome
    on_begin:
      - lambda: id(led).turn_on().set_brightness(1.0).set_transition_length(0).perform();
                id(led).loop();
      - lvgl.page.show: ota_page
      - lvgl.widget.refresh:
      - lambda: "id(lvgl_display).loop();"
    on_progress:
      then:
        - lvgl.widget.refresh:
        - lambda: "id(lvgl_display).loop();"

logger:
  hardware_uart: USB_SERIAL_JTAG
  logs:
    text_sensor: WARN
    component: ERROR

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: ${name}
    password: s3box123   
  on_connect:
    - script.execute: draw_display
    - switch.turn_on: speaker_enable
  on_disconnect:
    - script.execute: draw_display

captive_portal:

time:
  - platform: homeassistant
    id: ha_time
    on_time_sync:
      - script.execute: time_update
    on_time:
      - minutes: '*'
        seconds: 0
        then:
          - script.execute: time_update

interval:
  - interval: 10s
    then:
      - if:
          condition:
            - lambda: 'return { (id(api_connection) != true) };'
          then:
            - if:
                condition:
                  api.connected:
                then:
                  - lambda: "id(api_connection) = true;"
          else:
            - if:
                condition:
                  not:
                    api.connected:
                then:
                  - lambda: "id(api_connection) = false;"
  - interval: 10s
    then:
      - if:
          condition:
            - lambda: 'return { (id(wifi_connection) != true) };'
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - lambda: "id(wifi_connection) = true;"
                  - script.execute: update_wifi_info
          else:
            - if:
                condition:
                  not:
                    wifi.connected:
                then:
                  - lambda: "id(wifi_connection) = false;"
  - interval: 10s
    then:
      - lambda: |-
          float celsius = id(s3temp).state;
          if (id(temp_unit).state == "Fahrenheit") {
            id(display_temp) = celsius * 9.0 / 5.0 + 32.0;
          } else {
            id(display_temp) = celsius;
          }
      - lvgl.label.update:
          id: temp_label
          text: !lambda |-
            char buf[10];
            sprintf(buf, "%.1f%s", id(display_temp), (id(temp_unit).state == "Fahrenheit" ? "°F" : "°C"));
            return buf;
      - lvgl.label.update:
          id: humidity_label
          text: !lambda |-
            char buf[10];
            sprintf(buf, "%.1f%s", id(s3humidity).state, "%");
            return buf;

button:
  - platform: factory_reset
    id: factory_reset_btn
    internal: true

  - platform: restart
    id: reboot
    name: "Reboot"
    entity_category: diagnostic

  - platform: template
    id: restart_radar
    name: "Radar Reset"
    entity_category: diagnostic
    on_press:
      at581x.reset:
        id: "Radar"

output:
  - platform: ledc
    pin: GPIO47
    id: backlight_output

light:
  - platform: monochromatic
    id: led
    name: LCD Backlight
    entity_category: config
    output: backlight_output
    restore_mode: ALWAYS_ON
    default_transition_length: 50ms
    on_turn_on:
      - lvgl.resume:
      - lvgl.widget.redraw:
    on_turn_off:
      - lvgl.pause:
          show_snow: true
      - delay: 60s
      - if:
          condition: lvgl.is_paused
          then:
            - lvgl.pause:
                show_snow: false

sensor:
  - platform: aht10
    i2c_id: bus_b
    variant: AHT20
    temperature:
      name: "S3 Temperature"
      #filters:
      #  offset: -3
      id: s3temp
      on_value:
        - lvgl.widget.show: temp_label
    humidity:
      name: "S3 Humidity"
      id: s3humidity
      on_value:
        - lvgl.widget.show: humidity_label
    update_interval: 60s

  - platform: adc
    pin: GPIO10
    id: battery_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: "voltage"
    entity_category: "diagnostic"
    disabled_by_default: true
    update_interval: 30s
    attenuation: auto
    filters:
      - multiply: 4.11

  - platform: copy
    id: battery_percent
    source_id: battery_voltage
    name: "Battery level"
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: "battery"
    entity_category: "diagnostic"
    filters:
      - lambda: return (x - 2.7) / (4.2 - 2.7) * 100;
      - clamp:
          min_value: 0
          max_value: 100
    on_value:
      - lvgl.label.update:
          id: lbl_battery
          text: !lambda |-
            char buf[10];
            sprintf(buf, "%.f%%", id(battery_percent).state);
            return buf;
      - lvgl.label.update:
          id: lbl_battery_status
          text: !lambda |-
            static char buf[10];
            std::string icon;
            if (x == 100.0) {
                icon = "\U000F0079"; // mdi-battery (full)
            } else if (x > 90) {
                icon = "\U000F0082"; // mdi-battery-90
            } else if (x > 80) {
                icon = "\U000F0081"; // mdi-battery-80
            } else if (x > 70) {
                icon = "\U000F0080"; // mdi-battery-70
            } else if (x > 60) {
                icon = "\U000F007F"; // mdi-battery-60
            } else if (x > 50) {
                icon = "\U000F007E"; // mdi-battery-50
            } else if (x > 40) {
                icon = "\U000F007D"; // mdi-battery-40
            } else if (x > 30) {
                icon = "\U000F007C"; // mdi-battery-30
            } else if (x > 20) {
                icon = "\U000F007B"; // mdi-battery-20
            } else if (x > 10) {
                icon = "\U000F007A"; // mdi-battery-10
            } else if (x > 0) {
                icon = "\U000F008E"; // mdi-battery-outline
            } else {
                icon = "\U000F06A5"; // mdi-power-plug
            }
            snprintf(buf, sizeof(buf), "%s", icon.c_str());
            return buf;
    
  - platform: uptime
    id: up_sens
    on_value:
      - lambda: |-
          int seconds = id(up_sens).state;
          int days = seconds / 86400;
          int hours = seconds / 3600;
          int minutes = (seconds % 3600) / 60;
          seconds %= 60;
          id(up_sens_text).publish_state(str_sprintf("%03d:%02d:%02d:%02d", days, hours, minutes, seconds));
    update_interval: 300s

  - platform: wifi_signal
    name: "WiFi db"
    id: wifi_signal_db
    update_interval: 30s

  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal"
    id: wifi_percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""
    on_value:
      - lvgl.label.update:
          id: lbl_ss
          text: !lambda |-
            char buf[10];
            sprintf(buf, "%.f%%", id(wifi_percent).state);
            return buf;

##### CLIMATE PAGE SENSORS #####
  # - platform: homeassistant
    # id: climate1_temp
    # entity_id: climate.air_conditioner ## replace this with the entity of your air conditioner for the current air conditioner temperature
    # attribute: current_temperature ## current temmperature attribute
    # internal: true
    # on_value:
      # then:
        # - lvgl.label.update:
            # id: temp_climate_1   
            # text: !lambda |-
              # char buf[10];
              # sprintf(buf, "%.1f%s", x, (id(temp_unit).state == "Fahrenheit" ? "°F" : "°C"));
              # return buf;
        # - lvgl.label.update:
            # id: studioac_currenttemp   
            # text: !lambda |-
              # char buf[10];
              # sprintf(buf, "%.1f%s", x, (id(temp_unit).state == "Fahrenheit" ? "°F" : "°C"));
              # return buf; 

  # - platform: homeassistant
    # id: climate1_temp2
    # entity_id: climate.air_conditioner ## replace this with the entity of your air conditioner for the target air conditioner temperature
    # attribute: temperature ## target temmperature attribute
    # internal: true
    # on_value:
      # then:
        # - lvgl.label.update:
            # id: studioac_targettemp   
            # text: !lambda |-
              # char buf[10];
              # sprintf(buf, "%.1f%s", x, (id(temp_unit).state == "Fahrenheit" ? "°F" : "°C"));
              # return buf; 
        # - lambda: |-
            # float val = roundf(x * 2.0f) / 2.0f;  // Round to nearest 0.5
            # int scaled = (int)(val * 10);         // Scale for 1 decimal place
            # lv_spinbox_set_value(id(spinbox_studioac), scaled);
            # lv_obj_invalidate(id(spinbox_studioac));    // Force redraw

  # - platform: homeassistant
    # id: climate2_temp
    # entity_id: sensor.temperature2 ## entity for temperature sensor
    # internal: true
    # on_value:
      # then:
        # - lvgl.label.update:
            # id: temp_climate_2   
            # text: !lambda |-
              # char buf[10];
              # sprintf(buf, "%.1f%s", x, (id(temp_unit).state == "Fahrenheit" ? "°F" : "°C"));
              # return buf;

  # - platform: homeassistant
    # id: climate3_temp
    # entity_id: sensor.temperature3 ## entity for temperature sensor
    # internal: true
    # on_value:
      # then:
        # - lvgl.label.update:
            # id: temp_climate_3   
            # text: !lambda |-
              # char buf[10];
              # sprintf(buf, "%.1f%s", x, (id(temp_unit).state == "Fahrenheit" ? "°F" : "°C"));
              # return buf;

  # - platform: homeassistant
    # id: climate4_temp
    # entity_id: sensor.temperature4 ## entity for temperature sensor
    # internal: true
    # on_value:
      # then:
        # - lvgl.label.update:
            # id: temp_climate_4   
            # text: !lambda |-
              # char buf[10];
              # sprintf(buf, "%.1f%s", x, (id(temp_unit).state == "Fahrenheit" ? "°F" : "°C"));
              # return buf;

  # - platform: homeassistant
    # id: climate5_temp
    # entity_id: sensor.temperature5 ## entity for temperature sensor
    # internal: true
    # on_value:
      # then:
        # - lvgl.label.update:
            # id: temp_climate_5   
            # text: !lambda |-
              # char buf[10];
              # sprintf(buf, "%.1f%s", x, (id(temp_unit).state == "Fahrenheit" ? "°F" : "°C"));
              # return buf;

  # - platform: homeassistant
    # id: climate6_temp
    # entity_id: sensor.temperature6 ## entity for temperature sensor
    # internal: true
    # on_value:
      # then:
        # - lvgl.label.update:
            # id: temp_climate_6   
            # text: !lambda |-
              # char buf[10];
              # sprintf(buf, "%.1f%s", x, (id(temp_unit).state == "Fahrenheit" ? "°F" : "°C"));
              # return buf;
##########

text:
  - platform: template
    name: "Notification Text"
    id: notification_text
    mode: text
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!id(notification_text).state.empty() && 
                (id(previous_notification_text).empty() || id(notification_text).state != id(previous_notification_text))) {
              id(previous_notification_text) = id(notification_text).state;
              id(show_notification).execute();
            }

i2c:
  - id: bus_a
    sda: GPIO08
    scl: GPIO18
    scan: true
    sda_pullup_enabled: true
    scl_pullup_enabled: true
    frequency: 100kHz

  - sda: GPIO41
    scl: GPIO40
    scan: true
    sda_pullup_enabled: true
    scl_pullup_enabled: true
    frequency: 50kHz
    id: bus_b

at581x:
  id: "Radar"
  i2c_id: bus_b

touchscreen:
  - platform: gt911
    i2c_id: bus_a
    address: 0x5D
    id: gt911_touchscreen
    interrupt_pin:
      number: GPIO3
      ignore_strapping_warning: true
    on_touch:
      - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
    on_release:
      then:
        - if:
            condition: lvgl.is_paused
            then:
              - light.turn_on: led
              - lvgl.resume:
              - lvgl.widget.redraw:

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin:
      number: GPIO45
      ignore_strapping_warning: true
    i2s_bclk_pin: GPIO17
    i2s_mclk_pin: GPIO2

audio_adc:
  - platform: es7210
    id: es7210_adc
    i2c_id: bus_a
    bits_per_sample: 16bit
    sample_rate: 16000

audio_dac:
  - platform: es8311
    id: es8311_dac
    i2c_id: bus_a
    bits_per_sample: 16bit
    sample_rate: 48000

microphone:
  - platform: i2s_audio
    id: box_mic
    sample_rate: 16000
    i2s_din_pin: GPIO16
    bits_per_sample: 16bit
    adc_type: external

speaker:
  - id: i2s_audio_speaker
    platform: i2s_audio
    i2s_audio_id: i2s_audio_bus
    i2s_dout_pin: GPIO15
    dac_type: external
    sample_rate: 48000
    bits_per_sample: 16bit
    channel: left
    audio_dac: es8311_dac
    buffer_duration: 100ms

  - id: mixing_speaker
    platform: mixer
    output_speaker: i2s_audio_speaker
    source_speakers:
     - id: announcement_mixing_input
     - id: media_mixing_input
  - platform: resampler
    id: announcement_resampling_speaker
    output_speaker: announcement_mixing_input
    sample_rate: 48000
  - platform: resampler
    id: media_resampling_speaker
    output_speaker: media_mixing_input
    sample_rate: 48000

media_player:
  - platform: speaker
    name: Media Player
    id: speaker_media_player
    volume_increment: 0.05
    volume_min: 0.5
    volume_max: 0.8
    task_stack_in_psram: true
    announcement_pipeline:
      speaker: announcement_resampling_speaker
      format: FLAC
      sample_rate: 48000
      num_channels: 1
    media_pipeline:
      speaker: media_resampling_speaker
      format: FLAC
      num_channels: 2
      sample_rate: 48000
    files:
      - id: timer_finished_sound
        file: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/sounds/timer_finished.flac
      - id: wake_sound_file
        file: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/sounds/awake.flac
      - id: notify_sound_file
        file: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/sounds/notify.flac 
    on_state:
      then:
        - lambda: ESP_LOGD("media_player", "on_state");
        - if:
            condition:
              media_player.is_playing:
            then:
              - lambda: |-
                  id(media_state) = true;
              - lvgl.label.update:
                  id: lbl_media_playing
                  text: "Playing"
                  text_color: lime
            else:
              - lambda: |-
                  id(media_state) = false;
              - lvgl.label.update:
                  id: lbl_media_playing
                  text: "Nothing Playing"
                  text_color: lightblue
        - if:
            condition:
              and:
                - switch.is_off: timer_ringing
                - not:
                    voice_assistant.is_running:
                - not:
                    media_player.is_announcing:
            then:
              - mixer_speaker.apply_ducking:
                  id: media_mixing_input
                  decibel_reduction: 0
                  duration: 1.0s
    on_play:
      - lambda: ESP_LOGD("media_player", "on_play");
      - wait_until:
          - lambda: return id(global_is_assisting) == false;
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
            - if:
                condition:
                  - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
                then:
                  - wait_until:
                      - not:
                          voice_assistant.is_running:
    on_announcement:
      - lambda: ESP_LOGD("media_player", "on_announcement");
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
            - if:
                condition:
                  - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
                then:
                  - wait_until:
                      - not:
                          voice_assistant.is_running:
      - mixer_speaker.apply_ducking:
          id: media_mixing_input
          decibel_reduction: 20
          duration: 0.0s
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
            - script.execute: draw_display
    on_idle:
      - lambda: ESP_LOGD("media_player", "on_idle");
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - wait_until:
                    - not:
                        speaker.is_playing:
                          id: i2s_audio_speaker
            - script.execute: start_wake_word
            - script.execute: set_idle_or_mute_phase

micro_wake_word:
  id: mww
  vad:
  models:
    - model: okay_nabu
      id: okay_nabu
    - model: hey_mycroft
      id: hey_mycroft
    - model: hey_jarvis
      id: hey_jarvis
    - model: alexa
      id: alexa
    # experimental models
    #- model: https://github.com/esphome/micro-wake-word-models/raw/main/models/v2/experiments/okay_computer.json
    #  id: okay_computer
    #- model: https://github.com/esphome/micro-wake-word-models/raw/main/models/v2/experiments/hey_home_assistant.json
    #  id: hey_home_assistant
    - model: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/microwakeword/okay_hal.json
      id: okay_hal
    - model: https://github.com/chrisdunnname/esphome-s3-box-3-lvgl/raw/main/microwakeword/hey_luna.json
      id: hey_luna
  on_wake_word_detected:
    - lambda: id(global_is_assisting) = true;
    - delay: 50ms
    - if:
        condition:
          and:
            - switch.is_off: output_audio
            - switch.is_on: wake_sound
        then:
          - media_player.speaker.play_on_device_media_file:
              media_file: wake_sound_file
              announcement: true
          - wait_until:
              not:
                - media_player.is_announcing:
          - delay: 150ms
        else:
          if:
            condition:
              and:
                - switch.is_on: output_audio
                - switch.is_on: wake_sound
            then:
              - homeassistant.service:
                  service: media_player.play_media
                  data:
                    entity_id: media_player.${external_media_player}
                    media_content_id: '${home_assistant_host}/local/sounds/awake.mp3'
                    media_content_type: music                            
              - delay: 500ms
    - voice_assistant.start:
        wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  microphone: box_mic
  media_player: speaker_media_player
  micro_wake_word: mww
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  on_wake_word_detected:
    - lambda: id(global_is_assisting) = true;
    - if:
        condition:
          and:
            - switch.is_off: output_audio
            - switch.is_on: wake_sound
        then:
          - media_player.speaker.play_on_device_media_file:
              media_file: wake_sound_file
              announcement: true
          - wait_until:
              not:
                - media_player.is_announcing:
          - delay: 150ms
          - lambda: id(va).set_use_wake_word(false);
        else:
          if:
            condition:
              and:
                - switch.is_on: wake_sound
                - switch.is_on: output_audio
            then:
              - homeassistant.service:
                  service: media_player.play_media
                  data:
                    entity_id: media_player.${external_media_player}
                    media_content_id: '${home_assistant_host}/local/sounds/awake.mp3'
                    media_content_type: music
  on_start:
    - script.execute: draw_display
  on_listening:
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
    - text_sensor.template.publish:
        id: text_request
        state: "..."
    - text_sensor.template.publish:
        id: text_response
        state: "..."
    - script.execute: draw_display
  on_stt_vad_end:
    - lambda: ESP_LOGD("voice_assistant", "on_stt_vad_end");
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: draw_display
  on_stt_end:
    - text_sensor.template.publish:
        id: text_request
        state: !lambda return x;
    - script.execute: draw_display
  on_tts_start:
    - text_sensor.template.publish:
        id: text_response
        state: !lambda return x;
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: draw_display
  on_tts_end:
    - lambda: ESP_LOGD("voice_assistant", "on_tts_end");
    - if:
        condition:
          and:
            - switch.is_on: mute_response_switch
            - switch.is_off: media_mute
            - switch.is_off: ext_media_mute
        then:
          - switch.turn_on: media_mute
          - switch.turn_on: ext_media_mute
    - script.execute: draw_display
    - if:
        condition:
          - switch.is_on: output_audio
        then:
          - homeassistant.service:
              service: media_player.play_media
              data:
                entity_id: media_player.${external_media_player}
                media_content_id: !lambda 'return x;'
                media_content_type: music
                announce: "false"
    - delay: 10s
    - script.execute: draw_display
  on_idle:
    - lambda: ESP_LOGD("voice_assistant", "on_idle");
    - script.execute: draw_display
  on_end:
    - lambda: ESP_LOGD("voice_assistant", "on_end"); 
    - wait_until:
        condition:
          - media_player.is_announcing:
        timeout: 0.5s
    - lambda: ESP_LOGD("voice_assistant", "on_end announcement finished");
    - wait_until:
        - and:
            - not:
                media_player.is_announcing:
            - not:
                media_player.is_playing:
    - mixer_speaker.apply_ducking:
        id: media_mixing_input
        decibel_reduction: 0
        duration: 1.0s
    - lambda: id(global_is_assisting) = false;
    - lambda: ESP_LOGD("voice_assistant", "on_end starting wake word again"); 
    - if:
        condition:
          - lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - lambda: id(va).set_use_wake_word(false);
          - micro_wake_word.start:
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
    - if:
        condition:
          and:
            - switch.is_on: mute_response_switch
            - switch.is_on: media_mute
            - switch.is_on: ext_media_mute
        then:
          - switch.turn_off: media_mute
          - switch.turn_off: ext_media_mute
    - text_sensor.template.publish:
        id: text_request
        state: ""
    - text_sensor.template.publish:
        id: text_response
        state: ""
  on_error:
    - if:
        condition:
          lambda: return !id(init_in_progress);
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};
          - script.execute: draw_display
          - delay: 1s
          - if:
              condition:
                switch.is_off: mute_switch
              then:
                - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
              else:
                - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
          - script.execute: draw_display
    - lambda: id(global_is_assisting) = false;
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - script.execute: start_wake_word
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: stop_wake_word
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: draw_display
  on_timer_started:
    - script.execute: timer_ending
    - script.execute: draw_display
  on_timer_cancelled:
    - lambda: id(time_remaining_0).publish_state ("0:00:00");
    - lvgl.widget.hide: lbl_timer
    - lvgl.widget.hide: bar_timer
    - script.execute: draw_display
  on_timer_updated:
    - script.execute: draw_display
  on_timer_tick:
    - lambda: |-
        int seconds = timers[0].seconds_left;
        int hours = seconds / 3600;
        int minutes = (seconds % 3600) / 60;
        seconds %= 60;
        id(time_remaining_0).publish_state(str_sprintf("%d:%02d:%02d", hours, minutes, seconds));
    - lambda: id(draw_timer_timeline).execute();
  on_timer_finished:
    - lambda: id(voice_assistant_phase) = ${voice_assist_timer_finished_phase_id};
    - if:
        condition:
          - switch.is_on: output_audio
        then:
          - switch.turn_on: timer_ringing
          - script.execute: timer_started_external
          - script.execute: draw_display
        else:
          - if:
              condition:
                - switch.is_off: output_audio
              then:
                - switch.turn_on: timer_ringing
                - script.execute: draw_display

script:
  - id: draw_display
    then:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - script.execute: saver_enabled
            - if:
                condition:
                  wifi.connected:
                then:
                  - lambda: |-
                      id(wifi_connection) = true;
                  - script.execute: update_wifi_info
                  - lvgl.widget.show: lbl_wifi
                  - if:
                      condition:
                        api.connected:
                      then:
                        - if:
                            condition:
                              switch.is_on: timer_ringing
                            then:
                              - lambda: id(voice_assistant_phase) = ${voice_assist_timer_finished_phase_id};
                        - lambda: |-
                            id(api_connection) = true;
                        - lvgl.widget.show: lbl_api
                        - script.execute: set_uimode
                        - if:
                            condition:
                              not:
                                or:
                                  - lambda: |-
                                      return (id(voice_assistant_phase) == ${voice_assist_listening_phase_id});
                                  - lambda: |-
                                      return (id(voice_assistant_phase) == ${voice_assist_thinking_phase_id});
                                  - lambda: |-
                                      return (id(voice_assistant_phase) == ${voice_assist_replying_phase_id});
                                  - lambda: |-
                                      return (id(voice_assistant_phase) == ${voice_assist_error_phase_id});
                                  - lambda: |-
                                      return (id(voice_assistant_phase) == ${voice_assist_timer_finished_phase_id});
                                  - lambda: |-
                                      return (id(voice_assistant_phase) == ${voice_assist_timer_finishing_phase_id});
                            then:
                              - lvgl.widget.hide: but_snooze
                              - lvgl.page.show: idle_page                       
                        - if:
                            condition:
                              lambda: |-
                                return (id(voice_assistant_phase) == ${voice_assist_listening_phase_id});
                            then:
                              - lvgl.page.show: listening_page
                        - if:
                            condition:
                              lambda: |-
                                return (id(voice_assistant_phase) == ${voice_assist_thinking_phase_id});
                            then:
                              - lvgl.page.show: thinking_page
                              - if:
                                  condition:
                                    lambda: return id(display_conversation).state;
                                  then:
                                    - lvgl.widget.show: lbl_v_text_request1
                                  else:
                                    - lvgl.widget.hide: lbl_v_text_request1
                        - if:
                            condition:
                              lambda: |-
                                return (id(voice_assistant_phase) == ${voice_assist_replying_phase_id});
                            then:
                              - lvgl.page.show: replying_page
                              - if:
                                  condition:
                                    lambda: return id(display_conversation).state;
                                  then:
                                    - lvgl.widget.show: lbl_v_text_request2
                                    - lvgl.widget.show: lbl_v_text_response
                                  else:
                                    - lvgl.widget.hide: lbl_v_text_request2
                                    - lvgl.widget.hide: lbl_v_text_response
                        - if:
                            condition:
                              lambda: |-
                                return (id(voice_assistant_phase) == ${voice_assist_error_phase_id});
                            then:
                              - lvgl.page.show: error_page
                        - if:
                            condition:
                              lambda: |-
                                return (id(voice_assistant_phase) == ${voice_assist_timer_finished_phase_id});
                            then:
                              - lvgl.page.show: timer_finished_page
                        - if:
                            condition:
                              lambda: |-
                                return (id(voice_assistant_phase) == ${voice_assist_timer_finishing_phase_id});
                            then:
                              - lvgl.page.show: time_remaining_page
                        - lvgl.widget.hide: boot_screen
                      else:
                        - lambda: |-
                            id(api_connection) = false;
                        - lvgl.widget.hide: lbl_api
                        - lvgl.widget.hide: boot_screen
                        - lvgl.page.show: idle_page
                else:
                  - lambda: |-
                      id(wifi_connection) = false;
                  - lvgl.widget.hide: lbl_api
                  - lvgl.widget.hide: lbl_wifi
                  - lvgl.widget.hide: boot_screen
                  - lvgl.page.show: idle_page
          else:
            - lvgl.widget.show: boot_screen

  - id: fetch_first_active_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.is_active && iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_active_timer) = output_timer;
  - id: check_if_timers_active
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            for (auto &iterable_timer : timers) {
              if(iterable_timer.second.is_active) {
                output = true;
              }
            }
          }
          id(global_is_timer_active) = output;
  - id: fetch_first_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_timer) = output_timer;
  - id: check_if_timers
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            output = true;
          }
          id(global_is_timer) = output;

  - id: draw_timer_timeline
    then:
      - if:
          condition:
            lambda: |-
              id(check_if_timers_active).execute();
              id(check_if_timers).execute();
              return id(global_is_timer_active);
          then:
            - lvgl.widget.show: lbl_timer
            - lvgl.widget.show: bar_timer
            - lvgl.bar.update:
                id: bar_timer
                value: !lambda |-
                  id(fetch_first_active_timer).execute();
                  int percent_timer_left = round( 100 * id(global_first_active_timer).seconds_left / max(id(global_first_active_timer).total_seconds , static_cast<uint32_t>(1)));
                  return percent_timer_left;
          else:
            if:
              condition:
                lambda: |-
                  id(check_if_timers_active).execute();
                  id(check_if_timers).execute();
                  return id(global_is_timer);
              then:
                - lvgl.widget.show: lbl_timer
                - lvgl.widget.show: bar_timer
                - lvgl.bar.update:
                    id: bar_timer
                    value: !lambda |-
                      id(fetch_first_timer).execute();
                      int percent_timer_left = round( 100 * id(global_first_timer).seconds_left / max(id(global_first_timer).total_seconds , static_cast<uint32_t>(1)));
                      return percent_timer_left;
              else:
                - lvgl.widget.hide: lbl_timer
                - lvgl.widget.hide: bar_timer

  - id: draw_active_timer_widget
    then:
      if:
        condition:
          lambda: |-
            id(check_if_timers_active).execute();
            return id(global_is_timer_active);
        then:
          - lvgl.label.update:
              id: lbl_time_remaining
              text: !lambda |-
                char buf[15];
                id(fetch_first_active_timer).execute();
                int hours_left = floor(id(global_first_active_timer).seconds_left / 3600);
                int minutes_left = floor((id(global_first_active_timer).seconds_left - hours_left * 3600) / 60);
                int seconds_left = id(global_first_active_timer).seconds_left - hours_left * 3600 - minutes_left * 60 ;
                auto display_hours = (hours_left < 10 ? "0" : "") + std::to_string(hours_left);
                auto display_minute = (minutes_left < 10 ? "0" : "") + std::to_string(minutes_left);
                auto display_seconds = (seconds_left  < 10 ? "0" : "") + std::to_string(seconds_left) ;
                std::string display_string = "";
                if (hours_left > 0) {
                  display_string = display_hours + ":" + display_minute;
                } else {
                  display_string = display_minute + ":" + display_seconds;
                }
                sprintf(buf, "%s", display_string.c_str());
                return buf;

  - id: set_volume
    then:
      - media_player.volume_set:
          volume: !lambda return 0.5 + id(speaker_volume) * 0.05 ;
      - lvgl.bar.update:
          id: bar_volume
          value: !lambda return id(speaker_volume) * 10 ;

  - id: saver_enabled
    then:
      - if:
          condition:
            and:
              - switch.is_on: s_saver
              - not:
                  lvgl.page.is_showing: saver_page
          then:
            - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
            - delay: !lambda return id(s_saver_delay).state * 1000;
            - lambda: id(led).turn_on().set_brightness(id(s_saver_brightness).state /100).perform();
            - lvgl.page.show: saver_page
      - if:
          condition:
            and:
              - switch.is_on: s_saver_mode
              - lvgl.page.is_showing: saver_page
          then:
            - delay: !lambda return id(s_saver_blank_delay).state * 1000;
            - light.turn_off: led
    mode: restart

  - id: saver_enabled_manual
    then:
      - if:
          condition:
            - switch.is_on: s_saver
          then:
            - lambda: id(led).turn_on().set_brightness(id(s_saver_brightness).state /100).perform();
            - lvgl.page.show: saver_page
      - if:
          condition:
            - switch.is_on: s_saver_mode
          then:
            - delay: !lambda return id(s_saver_blank_delay).state * 1000;
            - light.turn_off: led
    mode: restart

  - id: start_wake_word
    then:
      - lambda: ESP_LOGD("script", "start_wake_word");
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - micro_wake_word.start:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:

  - id: stop_wake_word
    then:
      - lambda: ESP_LOGD("script", "stop_wake_word");
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - micro_wake_word.stop:

  - id: set_idle_or_mute_phase
    then:
      - lambda: ESP_LOGD("script", "set_idle_or_mute_phase");
      - if:
          condition:
            switch.is_off: mute_switch
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
          else:
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};

  - id: timer_started_external
    then:
      while:
        condition:
          switch.is_on: timer_ringing
        then:
          - homeassistant.service:
              service: media_player.play_media
              data:
                entity_id: media_player.${external_media_player}
                media_content_id: '${home_assistant_host}/local/sounds/timer_finished.mp3'
                media_content_type: music
          - delay: 1700ms

  - id: timer_ending
    then:
      - wait_until:
          - or:
              - lambda: return (id(time_remaining_0).state == "0:00:10");
              - lambda: return (id(time_remaining_0).state == "0:00:30");
              - lambda: return (id(time_remaining_0).state == "0:01:00");
              - lambda: return (id(time_remaining_0).state == "0:05:00");
              - lambda: return (id(time_remaining_0).state == "0:10:00");
      - lambda: id(voice_assistant_phase) = ${voice_assist_timer_finishing_phase_id};
      - script.execute: draw_display
    mode: parallel

  - id: set_alarm_status
    then:
      - if:
          condition: 
              lambda: return (id(alarm_status).state == "disarmed");
          then:
            - lvgl.label.update:
                id: lbl_alarm_status
                text: "Disarmed"
            - lvgl.label.update:
                id: lbl_alarm
                text: !lambda |-
                  static char buf[10];
                  std::string icon;
                  icon = "\U000F099E";
                  snprintf(buf, sizeof(buf), "%s", icon.c_str());
                  return buf;
                text_color: red
            - lvgl.matrix.button.update:
                id: but_disarm
                selected: true
                control:
                  checked: true
      - if:
          condition: 
              lambda: return (id(alarm_status).state == "pending");
          then:
            - lvgl.label.update:
                id: lbl_alarm_status
                text: "Pending"
      - if:
          condition: 
              lambda: return (id(alarm_status).state == "arming");
          then:
            - lvgl.label.update:
                id: lbl_alarm_status
                text: "Arming"
            - lvgl.label.update:
                id: lbl_alarm
                text: !lambda |-
                  static char buf[10];
                  std::string icon;
                  icon = "\U000F0565";
                  snprintf(buf, sizeof(buf), "%s", icon.c_str());
                  return buf;
                text_color: amber                  
      - if:
          condition: 
              lambda: return (id(alarm_status).state == "armed_home");
          then:
            - lvgl.label.update:
                id: lbl_alarm_status
                text: "Armed Home"
            - lvgl.label.update:
                id: lbl_alarm
                text: !lambda |-
                  static char buf[10];
                  std::string icon;
                  icon = "\U000F068A";
                  snprintf(buf, sizeof(buf), "%s", icon.c_str());
                  return buf;
                text_color: green
            - lvgl.matrix.button.update:
                id: but_armhome
                selected: true
                control:
                  checked: true
      - if:
          condition: 
              lambda: return (id(alarm_status).state == "armed_away");
          then:
            - lvgl.label.update:
                id: lbl_alarm_status
                text: "Armed Away"
            - lvgl.label.update:
                id: lbl_alarm
                text: !lambda |-
                  static char buf[10];
                  std::string icon;
                  icon = "\U000F099D";
                  snprintf(buf, sizeof(buf), "%s", icon.c_str());
                  return buf;
                text_color: green
            - lvgl.matrix.button.update:
                id: but_armaway
                selected: true
                control:
                  checked: true
      - if:
          condition: 
              lambda: return (id(alarm_status).state == "armed_night");
          then:
            - lvgl.label.update:
                id: lbl_alarm_status
                text: "Armed Night"
            - lvgl.label.update:
                id: lbl_alarm
                text: !lambda |-
                  static char buf[10];
                  std::string icon;
                  icon = "\U000F1828";
                  snprintf(buf, sizeof(buf), "%s", icon.c_str());
                  return buf;
                text_color: green
            - lvgl.matrix.button.update:
                id: but_armnight
                selected: true
                control:
                  checked: true
      - if:
          condition: 
              lambda: return (id(alarm_status).state == "triggered");
          then:
            - lvgl.label.update:
                id: lbl_alarm_status
                text: "Triggered"
 
  - id: update_wifi_info
    then:
      - lvgl.label.update:
          id: lbl_ip
          text: !lambda |-
            const char* ip = id(ip_addr).state.c_str();
            return ip;
      - lvgl.label.update:
          id: lbl_ssid
          text: !lambda |-
            const char* ssid = id(connected_ssid).state.c_str();
            return ssid;
      - lvgl.label.update:
          id: lbl_bssid
          text: !lambda |-
            const char* bssid = id(connected_bssid).state.c_str();
            return bssid;
      - lvgl.label.update:
          id: lbl_mac
          text: !lambda |-
            const char* mac = id(device_mac).state.c_str();
            return mac;

  - id: show_notification
    then:
      - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
      - if:
          condition:
            and:
              - switch.is_off: output_audio
              - switch.is_on: notify_sound
          then:
            - media_player.speaker.play_on_device_media_file:
                media_file: notify_sound_file
                announcement: true
            - wait_until:
                not:
                  - media_player.is_announcing:
            - delay: 200ms
          else:
            if:
              condition:
                and:
                  - switch.is_on: notify_sound
                  - switch.is_on: output_audio
              then:
                - homeassistant.service:
                    service: media_player.play_media
                    data:
                      entity_id: media_player.${external_media_player}
                      media_content_id: '${home_assistant_host}/local/sounds/notify.mp3'
                      media_content_type: music
                - delay: 500ms
      - lvgl.page.show: notification_page
      - lvgl.textarea.update:
          id: area_notification
          text: !lambda |-
            const char* notifytext = id(notification_text).state.c_str();
            return notifytext;
      - text.set:
          id: notification_text
          value: ""
      - delay: 20s
      - lambda: id(previous_notification_text) = "";
      - lvgl.page.show: idle_page
      - script.execute: draw_display

  - id: time_update
    then:
      - lvgl.indicator.update:
          id: minute_hand
          value: !lambda |-
            return id(ha_time).now().minute;
      - lvgl.indicator.update:
          id: hour_hand
          value: !lambda |-
            auto now = id(ha_time).now();
            return std::fmod(now.hour, 12) * 60 + now.minute;
      - lvgl.label.update:
          id: date_label
          text: 
            time_format: "%b %e"
            time: !lambda return id(ha_time).now();
      - lvgl.label.update:
          id: day_label
          text: 
            time_format: "%a"
            time: !lambda return id(ha_time).now();
      - lvgl.label.update:
          id: daydate_label
          text: 
            time_format: "%A %e %B %Y"
            time: !lambda return id(ha_time).now();
      - if:
          condition:
            - lambda: 'return { (id(time_format).state == "24 Hr") };'
          then:
            - lvgl.label.update:
                id: lbl_time
                text: 
                  time_format: "%H:%M"
                  time: !lambda return id(ha_time).now();
            - lvgl.label.update:
                id: digitaltime
                text: 
                  time_format: "%H:%M"
                  time: !lambda return id(ha_time).now();
          else:
            - lvgl.label.update:
                id: lbl_time
                text: 
                  time_format: "%l:%M"
                  time: !lambda return id(ha_time).now();
            - lvgl.label.update:
                id: digitaltime
                text: 
                  time_format: "%l:%M %p"
                  time: !lambda return id(ha_time).now();
      - if:
          condition:
            - lambda: 'return { (id(ss_clockstyle).state == "Digital") };'
          then:
            - lvgl.widget.hide: analog
            - lvgl.widget.show: digital
          else:
            - lvgl.widget.show: analog
            - lvgl.widget.hide: digital
      - if:
          condition:
            and:
              - switch.is_on: alarmclock
              - lambda: 'return { (id(ha_time).now().hour == id(alarmclock_hour).get_selected_index()) };'
              - lambda: 'return { (id(ha_time).now().minute == (id(alarmclock_minutes).get_selected_index() * 5)) };'
          then:
            - lambda: id(alarmclock_ringing) = true;
            - lvgl.widget.show: but_snooze
            - lambda: id(voice_assistant_phase) = ${voice_assist_timer_finished_phase_id};
            - switch.turn_on: timer_ringing

  - id: set_uimode
    then:
      - if:
          condition: 
            - lambda: return (id(current_uimode) != id(uimode).state);
          then:
            - if:
                condition: 
                  lambda: return (id(uimode).state == "Default" || id(uimode).state.empty());
                then:
                  - lvgl.style.update:
                      id: header_footer
                      bg_color: 0x1d5f96
                      bg_grad_color: 0x004466
                  - lvgl.buttonmatrix.update:
                      id: top_layer
                      items:
                        bg_color: 0x185281
                        bg_grad_color: 0x00334d
                  - lvgl.widget.show: listening
                  - lvgl.widget.show: thinking
                  - lvgl.widget.show: replying
                  - lvgl.widget.show: error
                else:
                  - lvgl.widget.hide: listening
                  - lvgl.widget.hide: thinking
                  - lvgl.widget.hide: replying
                  - lvgl.widget.hide: error
            - if:
                condition: 
                  lambda: return (id(uimode).state == "HAL");
                then:
                  - lvgl.style.update:
                      id: header_footer
                      bg_color: 0x1a1a1a
                      bg_grad_color: 0x000000
                  - lvgl.buttonmatrix.update:
                      id: top_layer
                      items:
                        bg_color: 0x1a1a1a
                        bg_grad_color: 0x000000
                  - lvgl.widget.show: listening_anim
                  - lvgl.widget.show: thinking_anim
                  - lvgl.widget.show: replying_anim
                  - lvgl.widget.show: error_anim
                else:
                  - lvgl.widget.hide: listening_anim
                  - lvgl.widget.hide: thinking_anim
                  - lvgl.widget.hide: replying_anim
                  - lvgl.widget.hide: error_anim
            - if:
                condition: 
                  lambda: return (id(uimode).state == "Home");
                then:
                  - lvgl.style.update:
                      id: header_footer
                      bg_color: 0x595959
                      bg_grad_color: 0x404040
                  - lvgl.buttonmatrix.update:
                      id: top_layer
                      items:
                        bg_color: 0x595959
                        bg_grad_color: 0x404040
                  - lvgl.widget.show: listening_anim2
                  - lvgl.widget.show: thinking_anim2
                  - lvgl.widget.show: replying_anim2
                  - lvgl.widget.show: error_anim2
                else:
                  - lvgl.widget.hide: listening_anim2
                  - lvgl.widget.hide: thinking_anim2
                  - lvgl.widget.hide: replying_anim2
                  - lvgl.widget.hide: error_anim2
            - lambda: id(current_uimode) = id(uimode).state;
            - lvgl.widget.refresh:
          else:
            - if:
                condition:
                  lambda: |-
                        return (id(voice_assistant_phase) == ${voice_assist_listening_phase_id} && id(uimode).state == "HAL");
                then:
                  - lvgl.animimg.start:
                      id: listening_anim
                else:
                  - lvgl.animimg.stop:
                      id: listening_anim
            - if:
                condition:
                  lambda: |-
                        return (id(voice_assistant_phase) == ${voice_assist_thinking_phase_id} && id(uimode).state == "HAL");
                then:
                  - lvgl.animimg.start:
                      id: thinking_anim
                else:
                  - lvgl.animimg.stop:
                      id: thinking_anim
            - if:
                condition:
                  lambda: |-
                        return (id(voice_assistant_phase) == ${voice_assist_replying_phase_id} && id(uimode).state == "HAL");
                then:
                  - lvgl.animimg.start:
                      id: replying_anim
                else:
                  - lvgl.animimg.stop:
                      id: replying_anim
            - if:
                condition:
                  lambda: |-
                        return (id(voice_assistant_phase) == ${voice_assist_replying_phase_id} && id(uimode).state == "Home");
                then:
                  - lvgl.animimg.start:
                      id: replying_anim2
                else:
                  - lvgl.animimg.stop:
                      id: replying_anim2
  - id: snoozealarm
    then:
      - lambda: id(alarmclock_ringing) = false;
      - delay: !lambda "return id(snooze_time).state * 1000;"
      - if:
          condition:
            switch.is_off: snoozeonpresence
          then:
            - lvgl.widget.show: but_snooze
          else:
            - lvgl.widget.hide: but_snooze
      - lambda: id(voice_assistant_phase) = ${voice_assist_timer_finished_phase_id};
      - switch.turn_on: timer_ringing
    mode: restart
                      
switch:
  - platform: gpio
    name: Speaker Enable
    id: speaker_enable
    pin: 
      number: GPIO46
      ignore_strapping_warning: true
    restore_mode: ALWAYS_OFF
    entity_category: config
    disabled_by_default: true

  - platform: template
    name: Display conversation
    id: display_conversation
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    icon: 'mdi:chat'
    turn_on_action:
      - lvgl.checkbox.update:
          id: chk_display_conversation
          state:
            checked: true
    turn_off_action:
      - lvgl.checkbox.update:
          id: chk_display_conversation
          state:
            checked: false

  - platform: template
    name: Output audio externally
    id: output_audio
    icon: 'mdi:volume-off'
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_on:
      - media_player.volume_set:
          id: speaker_media_player
          volume: 0
      - lvgl.widget.hide: obj_media
      - lvgl.widget.hide: lbl_media_playing
      - lvgl.widget.hide: bar_volume
      - lvgl.widget.show: obj_ext_media
      - lvgl.widget.show: lbl_ext_media_playing
      - lvgl.checkbox.update:
          id: chk_output_audio
          state:
            checked: true
    on_turn_off:
      - media_player.volume_set:
          id: speaker_media_player
          volume: 1.0
      - lvgl.widget.show: obj_media
      - lvgl.widget.show: lbl_media_playing
      - lvgl.widget.show: bar_volume
      - lvgl.widget.hide: obj_ext_media
      - lvgl.widget.hide: lbl_ext_media_playing
      - lvgl.checkbox.update:
          id: chk_output_audio
          state:
            checked: false
 
  - platform: template
    name: Mute
    id: mute_switch
    icon: "mdi:microphone-off"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - microphone.unmute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
      - lvgl.label.update:
          id: lbl_mic
          text_color: 0xFFFFFF
          text: !lambda |-
              static char buf[10];
              std::string icon;
              icon = "\U000F036C";
              snprintf(buf, sizeof(buf), "%s", icon.c_str());
              return buf;
      - script.execute: draw_display
    on_turn_on:
      - microphone.mute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
      - lvgl.label.update:
          id: lbl_mic
          text_color: 0xFF0000
          text: !lambda |-
              static char buf[10];
              std::string icon;
              icon = "\U000F036D";
              snprintf(buf, sizeof(buf), "%s", icon.c_str());
              return buf;
      - script.execute: draw_display

  - platform: template
    id: media_mute
    optimistic: true
    on_turn_on:
      - media_player.volume_set:
          id: speaker_media_player
          volume: 0
      - lvgl.label.update:
          id: lbl_media_mute
          text_color: red
          text: !lambda |-
              static char buf[10];
              std::string icon;
              icon = "\U000F0581";
              snprintf(buf, sizeof(buf), "%s", icon.c_str());
              return buf;
      - lvgl.bar.update:
          id: bar_volume
          indicator:
            bg_color: red
    on_turn_off:
      - media_player.volume_set:
          id: speaker_media_player
          volume: 1.0
      - lvgl.label.update:
          id: lbl_media_mute
          text_color: lime
          text: !lambda |-
              static char buf[10];
              std::string icon;
              icon = "\U000F057E";
              snprintf(buf, sizeof(buf), "%s", icon.c_str());
              return buf;
      - lvgl.bar.update:
          id: bar_volume
          indicator:
            bg_color: lime
  - platform: template
    id: s_saver
    name: Scr/save enable
    icon: mdi:sleep
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    turn_on_action:
      - lvgl.checkbox.update:
          id: chk_screensaver
          state:
            checked: true
    turn_off_action:
      - lvgl.checkbox.update:
          id: chk_screensaver
          state:
            checked: false

  - platform: template
    id: s_saver_mode
    name: Scr/off enable
    icon: 'mdi:monitor-off'
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    turn_on_action:
      - lvgl.checkbox.update:
          id: chk_timeout_blank
          state:
            checked: true
    turn_off_action:
      - lvgl.checkbox.update:
          id: chk_timeout_blank
          state:
            checked: false

  - platform: template
    id: s_saver_presc
    name: Screen wake on motion
    icon: 'mdi:motion-sensor'
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - lvgl.checkbox.update:
          id: chk_wake_presence
          state:
            checked: true
    turn_off_action:
      - lvgl.checkbox.update:
          id: chk_wake_presence
          state:
            checked: false

  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF

    on_turn_off:
      - lambda: id(time_remaining_0).publish_state ("0:00:00");
      - lambda: |-
              id(speaker_media_player)
                ->make_call()
                .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
                .set_announcement(true)
                .perform();
              id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      - media_player.stop:
          announcement: true
      - lvgl.widget.hide: lbl_timer
      - lvgl.widget.hide: bar_timer
    on_turn_on:
      - lambda: id(led).turn_on().set_brightness(1.0).perform();
      - lambda: |-
            id(speaker_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
              .set_announcement(true)
              .perform();
            id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_sound
          announcement: true
      - delay: 15min
      - switch.turn_off: timer_ringing

  - platform: template
    id: wake_sound
    name: Play wake sound
    icon: mdi:music
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - lvgl.checkbox.update:
          id: chk_wake_sound
          state:
            checked: true
    turn_off_action:
      - lvgl.checkbox.update:
          id: chk_wake_sound
          state:
            checked: false

  - platform: template
    id: notify_sound
    name: Notification sound
    icon: mdi:music
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF   
    turn_on_action:
      - lvgl.checkbox.update:
          id: chk_notify_sound
          state:
            checked: true
    turn_off_action:
      - lvgl.checkbox.update:
          id: chk_notify_sound
          state:
            checked: false
            
  - platform: template
    id: mute_response_switch
    name: Mute Responses
    icon: mdi:chat-sleep
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - lvgl.checkbox.update:
          id: chk_mute_reponse
          state:
            checked: true
    turn_off_action:
      - lvgl.checkbox.update:
          id: chk_mute_reponse
          state:
            checked: false

  - platform: template
    id: ext_media_mute
    icon: 'mdi:volume-off'
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_on:
      - homeassistant.service:
          service: media_player.volume_mute
          data:
            entity_id: media_player.${external_media_player}
      - lvgl.label.update:
          id: lbl_ext_media_mute
          text_color: red
          text: !lambda |-
            static char buf[10];
            std::string icon;
            icon = "\U000F0581";
            snprintf(buf, sizeof(buf), "%s", icon.c_str());
            return buf;
    on_turn_off:
      - homeassistant.service:
          service: media_player.volume_mute
          data:
            entity_id: media_player.${external_media_player}
      - lvgl.label.update:
          id: lbl_ext_media_mute
          text_color: lime
          text: !lambda |-
            static char buf[10];
            std::string icon;
            icon = "\U000F057E";
            snprintf(buf, sizeof(buf), "%s", icon.c_str());
            return buf;
 
  - platform: at581x
    at581x_id: "Radar"
    name: "Radar Enable"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    
  - platform: lvgl
    name: "Alarm Clock"
    id: alarmclock
    widget: btn_alarmclock
    icon: 'mdi:alarm'
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_off:
      - lvgl.widget.hide: but_snooze
      - switch.turn_off: timer_ringing

  - platform: lvgl
    name: "Snooze on Presence"
    id: snoozeonpresence
    widget: chk_snoozeonceonpresence
    icon: 'mdi:alarm-snooze'
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: lvgl
    name: "Stop Ring On Presence"
    id: stopringonpresence
    widget: chk_stopringonpresence
    icon: 'mdi:timer-remove'
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    icon: "mdi:account-voice"
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: In Home Assistant
    on_value:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - wait_until:
                lambda: return id(voice_assistant_phase) == ${voice_assist_muted_phase_id} || id(voice_assistant_phase) == ${voice_assist_idle_phase_id};
            - if:
                condition:
                  lambda: return x == "In Home Assistant";
                then:
                  - micro_wake_word.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute_switch
                      then:
                        - lambda: id(va).set_use_wake_word(true);
                        - voice_assistant.start_continuous:
                        - text_sensor.template.publish:
                            id: wakeword_location
                            state: !lambda 'return "Home Assistant";'
            - if:
                condition:
                  lambda: return x == "On device";
                then:
                  - text_sensor.template.publish:
                      id: wakeword_location
                      state: !lambda 'return "On Device";'
                  - lambda: id(va).set_use_wake_word(false);
                  - voice_assistant.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute_switch
                      then:
                        - micro_wake_word.start

  - platform: template
    name: "Wake word sensitivity"
    optimistic: true
    initial_option: Moderately sensitive
    restore_value: true
    entity_category: config
    options:
      - Slightly sensitive
      - Moderately sensitive
      - Very sensitive
    on_value:
      lambda: |-
        if (x == "Slightly sensitive") {
          id(okay_nabu).set_probability_cutoff(217);    // 0.85 -> 0.000 FAPH on DipCo (Manifest's default)
          id(hey_jarvis).set_probability_cutoff(247);   // 0.97 -> 0.563 FAPH on DipCo (Manifest's default)
          id(hey_mycroft).set_probability_cutoff(253);  // 0.99 -> 0.567 FAPH on DipCo
          id(alexa).set_probability_cutoff(250);  // 0.98
          //id(okay_computer).set_probability_cutoff(247);
          //id(hey_home_assistant).set_probability_cutoff(247);
          id(okay_hal).set_probability_cutoff(247);
          id(hey_luna).set_probability_cutoff(247);
        } else if (x == "Moderately sensitive") {
          id(okay_nabu).set_probability_cutoff(176);    // 0.69 -> 0.376 FAPH on DipCo
          id(hey_jarvis).set_probability_cutoff(235);   // 0.92 -> 0.939 FAPH on DipCo
          id(hey_mycroft).set_probability_cutoff(242);  // 0.95 -> 1.502 FAPH on DipCo (Manifest's default)
          id(alexa).set_probability_cutoff(235); // 0.92
          //id(okay_computer).set_probability_cutoff(235);
          //id(hey_home_assistant).set_probability_cutoff(235);
          id(okay_hal).set_probability_cutoff(235);
          id(hey_luna).set_probability_cutoff(235);
        } else if (x == "Very sensitive") {
          id(okay_nabu).set_probability_cutoff(143);    // 0.56 -> 0.751 FAPH on DipCo
          id(hey_jarvis).set_probability_cutoff(212);   // 0.83 -> 1.502 FAPH on DipCo
          id(hey_mycroft).set_probability_cutoff(237);  // 0.93 -> 1.878 FAPH on DipCo
          id(alexa).set_probability_cutoff(217); // 0.85
          //id(okay_computer).set_probability_cutoff(212);
          //id(hey_home_assistant).set_probability_cutoff(212);
          id(okay_hal).set_probability_cutoff(212);
          id(hey_luna).set_probability_cutoff(212);
        }

  - platform: lvgl
    id: time_format
    entity_category: config
    restore_value: true
    name: Time Format
    widget: dropdown_timeformat

  - platform: lvgl
    id: ss_clockstyle
    entity_category: config
    restore_value: true
    name: Screensaver Clock
    widget: dropdown_ssclock
    
  - platform: lvgl
    id: uimode
    entity_category: config
    restore_value: true
    name: UI Mode
    widget: dropdown_uimode

  - platform: template
    id: temp_unit
    name: "Temperature Unit"
    entity_category: config
    optimistic: true
    restore_value: true
    options:
      - Celsius
      - Fahrenheit
    initial_option: Celsius
    on_value:
      - if:
          condition:
            lambda: return id(temp_unit).state == "Celsius";
          then:
            - lvgl.dropdown.update:
                id: dropdown_tempunit
                selected_index: 0
          else:
            - lvgl.dropdown.update:
                id: dropdown_tempunit
                selected_index: 1

  - platform: lvgl
    id: sel_alarmclock_hour
    widget: alarmclock_hour
    name: "AlarmClock Hour"
    entity_category: config
    internal: true
    restore_value: true
    
  - platform: lvgl
    id: sel_alarmclock_minutes
    widget: alarmclock_minutes
    name: "AlarmClock Minutes"
    entity_category: config    
    internal: true
    restore_value: true

number:
  - id: s_saver_delay
    platform: template
    name: "Scr/save delay"
    icon: 'mdi:sleep'
    entity_category: config
    unit_of_measurement: 'secs'
    optimistic: true
    restore_value: true
    initial_value: 120
    step: 5
    min_value: 10
    max_value: 999999
    on_value:
      - component.update: s_saver_delay
      - script.execute: saver_enabled
      - lvgl.spinbox.update:
          id: spinbox_delay
          value: !lambda return x;

  - id: s_saver_blank_delay
    platform: template
    name: "Scr/off delay"
    icon: 'mdi:monitor-off'
    entity_category: config
    unit_of_measurement: 'secs'
    optimistic: true
    restore_value: true
    initial_value: 1800
    step: 5
    min_value: 10
    max_value: 999999
    on_value:
      - component.update: s_saver_blank_delay
      - script.execute: saver_enabled
      - lvgl.spinbox.update:
          id: spinbox_scr_delay
          value: !lambda return x;

  - id: s_saver_brightness
    platform: template
    name: "Scr/save Brightness"
    icon: 'mdi:sleep'
    entity_category: config
    unit_of_measurement: '%'
    optimistic: true
    restore_value: true
    initial_value: 30
    step: 5
    min_value: 20
    max_value: 100
    on_value:
      - component.update: s_saver_brightness
      - script.execute: saver_enabled
      - lvgl.slider.update:
          id: slider_dimbrightness
          value: !lambda return x;

  - id: s_default_brightness
    platform: template
    name: "Default Brightness"
    icon: 'mdi:monitor'
    entity_category: config
    unit_of_measurement: '%'
    optimistic: true
    restore_value: true
    initial_value: 100
    step: 5
    min_value: 20
    max_value: 100
    on_value:
      - component.update: s_default_brightness
      - script.execute: saver_enabled
      - lvgl.slider.update:
          id: slider_brightness
          value: !lambda return x;

  - id: radar_delayed_off
    platform: template
    name: "Presence duration"
    icon: mdi:account-clock
    optimistic: true
    restore_value: true
    initial_value: 10
    min_value: 5
    step: 5
    max_value: 300
    unit_of_measurement: 'secs'
    entity_category: config
    mode: box

  - id: snooze_time
    platform: template
    name: "Snooze Time"
    icon: 'mdi:alarm-snooze'
    optimistic: true
    restore_value: true
    initial_value: 300
    min_value: 10
    step: 5
    max_value: 1800
    unit_of_measurement: 'secs'
    entity_category: config
    mode: box

globals:
  - id: init_in_progress
    type: bool
    restore_value: false
    initial_value: "true"
  - id: voice_assistant_phase
    type: int
    restore_value: false
    initial_value: ${voice_assist_not_ready_phase_id}
  - id: wifi_connection
    type: bool
    restore_value: no
    initial_value: "false"
  - id: api_connection
    type: bool
    restore_value: no
    initial_value: "false"
  - id: mute_value
    type: bool
    restore_value: no
    initial_value: "false"
  - id: speaker_volume
    type: int
    restore_value: no
    initial_value: '5'
  - id: media_state
    type: bool
    restore_value: no
    initial_value: "false"
  - id: global_first_active_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer_active
    type: bool
    restore_value: false
  - id: global_first_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer
    type: bool
    restore_value: false
  - id: alarm_action
    type: std::string
    initial_value: ""
  - id: global_is_assisting
    type: bool
    restore_value: false
  - id: previous_notification_text
    type: std::string
    initial_value: ""
  - id: display_temp
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: current_uimode
    type: std::string
    initial_value: ""
  - id: alarmclock_ringing
    type: bool
    restore_value: false
    
image:
#Default Images
  - file: ${error_illustration_file}
    id: error_img
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${idle_illustration_file}
    id: idle_img
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${listening_illustration_file}
    id: listening_img
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${thinking_illustration_file}
    id: thinking_img
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${replying_illustration_file}
    id: replying_img
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${loading_illustration_file}
    id: loading_img
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${timer_finished_illustration_file}
    id: timer_finished_img
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${logo_illustration_file}
    id: logo_img
    resize: 80x75
    type: RGB565
    transparency: alpha_channel
# Animated Voice Assistant images
  - file: ${anim_listening1}
    id: anim_listening1
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${anim_listening2}
    id: anim_listening2
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${anim_thinking1}
    id: anim_thinking1
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${anim_thinking2}
    id: anim_thinking2
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${anim_replying1}
    id: anim_replying1
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${anim_replying2}
    id: anim_replying2
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${anim_error1}
    id: anim_error1
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${anim2_listening}
    id: anim2_listening
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${anim2_thinking}
    id: anim2_thinking
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${anim2_replying1}
    id: anim2_replying1
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${anim2_replying2}
    id: anim2_replying2
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${anim2_replying3}
    id: anim2_replying3
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${anim2_replying4}
    id: anim2_replying4
    resize: 318x238
    type: RGB565
    transparency: alpha_channel
  - file: ${anim2_error}
    id: anim2_error
    resize: 318x238
    type: RGB565
    transparency: alpha_channel  
    
font:
  - file: ${font_file}
    id: my_font
    size: 14
    glyphs:
      '${font_glyphs}'

  - file: ${font_file}
    id: my_font12
    size: 12
    glyphs:
      '${font_glyphs}'

  - file: ${font_file}
    id: my_font16
    size: 16
    glyphs:
      '${font_glyphs}'

  - file: ${font_file}
    id: my_font40
    size: 40
    glyphs:
      '${font_glyphs}'

  - file: ${font_file}
    id: my_font60
    size: 60
    glyphs:
      '${font_glyphs}'

  - file: ${font_file}
    id: my_font18
    size: 18
    glyphs:
      '${font_glyphs}'

  - file: ${font_file}
    id: my_font22
    size: 22
    glyphs:
      '${font_glyphs}'
      
  - file: ${icon_font_file}
    id: icon_font_55
    size: 45
    glyphs: &icon_glyphs
      - "\U000F0079"#battery 100%
      - "\U000F007A"#battery 10%
      - "\U000F007B"#battery 20%
      - "\U000F007C"#battery 30%
      - "\U000F007D"#battery 40%
      - "\U000F007E"#battery 50%
      - "\U000F007F"#battery 60%
      - "\U000F0080"#battery 70%
      - "\U000F0081"#battery 80%
      - "\U000F0082"#battery 90%
      - "\U000F008E"#mdi-battery-outline
      - "\U000F0091"#mdi-battery-unknown
      - "\U000F0020"#alarmclock
      - "\U000F009E"#bell
      - "\U000F0150"#clock
      - "\U000F01AE"#gbp pound symbol
      - "\U000F0210"#fan
      - "\U000F0238"#heating
      - "\U000F024A"#garden/flower
      - "\U000F0335"#light bulb off
      - "\U000F036C"#microphone on
      - "\U000F036D"#microphone off
      - "\U000F036F"#voice settings
      - "\U000F03E4"#pause
      - "\U000F040A"#play
      - "\U000F040E"#play/pause
      - "\U000F0493"#settings cog
      - "\U000F04AD"#next track
      - "\U000F04AE"#previous track
      - "\U000F04B9"#living room
      - "\U000F04C8"#spots
      - "\U000F04DB"#stop
      - "\U000F0502"#screen settings
      - "\U000F050F"#temp sensor
      - "\U000F051B"#timer
      - "\U000F0521"#toggle on
      - "\U000F0565"#arming
      - "\U000F057E"#speaker on
      - "\U000F0581"#speaker off
      - "\U000F05CB"#voice
      - "\U000F06A5"#power-plug
      - "\U000F068A"#alarm home
      - "\U000F068E"#alarm snooze
      - "\U000F06E8"#light bulb illuminated
      - "\U000F075A"#music
      - "\U000F075D"#vol plus
      - "\U000F075E"#vol minus
      - "\U000F0769"#ceiling
      - "\U000F07D0"#api connected
      - "\U000F07F4"#tv
      - "\U000F0873"#car miles non
      - "\U000F0874"#car miles full
      - "\U000F0875"#car miles low
      - "\U000F087B"#api disconnected
      - "\U000F08D6"#settings
      - "\U000F097E"#light switch
      - "\U000F099D"#alarm away
      - "\U000F099E"#disarmed
      - "\U000F0A19"#toggle off
      - "\U000F0B26"#down
      - "\U000F0B28"#left
      - "\U000F0B2A"#right
      - "\U000F0B2C"#up
      - "\U000F0B6C"#car battery
      - "\U000F0D90"#screen off
      - "\U000F0EBA"#stats
      - "\U000F0ED4"#voice off
      - "\U000F0FCE"#scene
      - "\U000F1061"#dining
      - "\U000F10CD"#battery warning
      - "\U000F1160"#kitchen
      - "\U000F12A8"#touch button
      - "\U000F12D3"#garage closed
      - "\U000F12D4"#garage open
      - "\U000F1322"#tools
      - "\U000F16BC"#wifidisconnected
      - "\U000F16BD"#wifi connected
      - "\U000F1722"#fire off
      - "\U000F1747"#tall lamp
      - "\U000F1828"#armed night
      - "\U000F192D"#electricity
      - "\U000F1987"#floods
      - "\U000F1A12"#home button
      - "\U000F1A1B"#gas
      - "\U000F1C3B"#battery charging/usb powered
      - "\U000F1C6F"#info
      - "\U000F05FA"#kettle
      - "\U000F070D"#vacuum
      - "\U000F0AAC"#dishwasher
      - "\U000F11B8"#dishwasheralert
      - "\U000F083B"#televisionoff
      - "\U000F033E"#lock
      - "\U000F033F"#lock-open
      - "\U000F00DF"#brightness 

  - file: ${icon_font_file}
    id: icon_font_20
    size: 20
    bpp: 4
    glyphs: *icon_glyphs

  - file: ${icon_font_file}
    id: icon_font_80
    size: 75
    glyphs: *icon_glyphs

text_sensor:
  - id: text_request
    platform: template
    on_value:
      - if:
          condition:
            - lambda: return (id(text_request).state.length()>30);
          then:
            - lvgl.label.update:
                id: lbl_v_text_request1
                long_mode: SCROLL_CIRCULAR
            - lvgl.label.update:
                id: lbl_v_text_request2
                long_mode: SCROLL_CIRCULAR
          else:
            - lvgl.label.update:
                id: lbl_v_text_request1
                long_mode: DOT
            - lvgl.label.update:
                id: lbl_v_text_request2
                long_mode: DOT
      - if:
          condition:
            lambda: return id(display_conversation).state;
          then:
            - lvgl.label.update:
                id: lbl_v_text_request1
                text: !lambda |-
                  return id(text_request).state;
            - lvgl.label.update:
                id: lbl_v_text_request2
                text: !lambda |-
                  return id(text_request).state;

  - id: text_response
    platform: template
    on_value:
      - if:
          condition:
            - lambda: return (id(text_response).state.length()>30);
          then:
            - lvgl.label.update:
                id: lbl_v_text_response
                long_mode: SCROLL_CIRCULAR
          else:
            - lvgl.label.update:
                id: lbl_v_text_response
                long_mode: DOT
      - if:
          condition:
            lambda: return id(display_conversation).state;
          then:
            - lvgl.label.update:
                id: lbl_v_text_response
                text: !lambda |-
                  return id(text_response).state;
      
  - platform: wifi_info
    ip_address:
      name: IP Address
      id: ip_addr
      entity_category: "diagnostic"
    ssid:
      id: connected_ssid
      name: SSID
      entity_category: "diagnostic"
    bssid:
      id: connected_bssid
      name: BSSID
      entity_category: "diagnostic"
    mac_address:
      id: device_mac

  - platform: template
    id: up_sens_text
    name: Device uptime
    entity_category: "diagnostic"
    icon: mdi:clock
    on_value:
      - lvgl.label.update:
          id: lbl_uptime
          text: !lambda |-
            const char* uptime = id(up_sens_text).state.c_str();
            return uptime;

  - platform: template
    id: wakeword_location
    on_value:
      - if:
          condition:
            lambda: return id(wakeword_location).state == "Home Assistant";
          then:
            - lvgl.dropdown.update:
                id: dropdown_wakeword
                selected_index: 0
          else:
            - lvgl.dropdown.update:
                id: dropdown_wakeword
                selected_index: 1

  - platform: template
    id: time_remaining_0
    name: Timer
    icon: mdi:clock
    on_value:
      - lvgl.label.update:
          id: lbl_time_remaining
          text: !lambda |-
              char buf[10];
              sprintf(buf, "%s", id(time_remaining_0).state.c_str());
              return buf; 

  - platform: template
    id: time_remaining_1

  - platform: template
    id: time_display_format
    update_interval: never
  
  - platform: homeassistant
    entity_id: media_player.${external_media_player}
    id: ha_media_status
    on_value:
      then:
       - lvgl.label.update:
           id: lbl_ext_media_playing
           text: !lambda |-
             char buf[20];
             sprintf(buf, "%s", id(ha_media_status).state.c_str());
             return buf;

  - platform: homeassistant
    entity_id: media_player.${external_media_player}
    id: ha_media_title
    attribute: media_content_id

  - platform: homeassistant
    name: "Alarm Status"
    entity_id: alarm_control_panel.alarmo ## Replace with alarmo entity
    id: alarm_status
    on_value:
      then:
        - script.execute: set_alarm_status

##### CLIMATE PAGE TEXT SENSORS #####
  # - platform: homeassistant
    # id: climate1_item
    # entity_id: climate.air_conditioner ## replace this with the entity of your air conditioner
    # internal: true
    # on_value:
      # then:
        # - if:
            # condition: 
                # lambda: return (id(climate1_item).state == "off");
            # then:
              # - lvgl.dropdown.update:
                  # id: dropdown_studioacmode
                  # selected_index: 0
              # - lvgl.widget.update:
                  # id: but_climate_1
                  # state:
                    # checked: false
              # - lvgl.widget.update:
                  # id: but_studioac_1
                  # state:
                    # checked: false
            # else:
              # - lvgl.widget.update:
                  # id: but_climate_1
                  # state:
                    # checked: true
              # - lvgl.widget.update:
                  # id: but_studioac_1
                  # state:
                    # checked: true
              # - if:
                  # condition:
                    # lambda: return (id(climate1_item).state == "heat_cool");
                  # then:
                    # - lvgl.dropdown.update:
                        # id: dropdown_studioacmode
                        # selected_index: 1
              # - if:
                  # condition:
                    # lambda: return (id(climate1_item).state == "heat");
                  # then:
                    # - lvgl.dropdown.update:
                        # id: dropdown_studioacmode
                        # selected_index: 2
              # - if:
                  # condition:
                    # lambda: return (id(climate1_item).state == "cool");
                  # then:
                    # - lvgl.dropdown.update:
                        # id: dropdown_studioacmode
                        # selected_index: 3
              # - if:
                  # condition:
                    # lambda: return (id(climate1_item).state == "cool");
                  # then:
                    # - lvgl.dropdown.update:
                        # id: dropdown_studioacmode
                        # selected_index: 4

##### CONTROL PAGE TEXT SENSORS #####
  # - platform: homeassistant
    # id: control1_item
    # entity_id: switch.kettle ## Replace this with the entity for a kettle
    # internal: true
    # on_value:
      # then:
        # if:
          # condition:
            # lambda: return (id(control1_item).state == "on");
          # then:
            # - lvgl.widget.update:
                  # id: but_control_1
                  # state:
                    # checked: !lambda return true;
          # else:
            # - lvgl.widget.update:
                  # id: but_control_1
                  # state:
                    # checked: !lambda return false;

  # - platform: homeassistant
    # id: control2_item
    # entity_id: vacuum.vacuum_cleaner ## Replace this with the entity for a vacuum cleaner
    # internal: true
    # on_value:
      # then:
        # - if:
            # condition:
              # lambda: return (id(control2_item).state == "docked");
            # then:
              # - lvgl.widget.update:
                  # id: but_control_2
                  # state:
                    # checked: !lambda return false;
              # - lvgl.label.update:
                        # id: ico_control_2
                        # text_color: white # icon color for docked state
            # else:
              # - lvgl.widget.update:
                  # id: but_control_2
                  # state:
                    # checked: !lambda return true;
              # - if:
                  # condition:
                    # lambda: return (id(control2_item).state == "returning");
                  # then:
                    # - lvgl.label.update:
                        # id: ico_control_2
                        # text_color: green # icon color for returning state
                  # else:
                    # - lvgl.label.update:
                        # id: ico_control_2
                        # text_color: yellow # icon color for other active states

  # - platform: homeassistant
    # id: control4_item
    # entity_id: binary_sensor.garage_door ## Replace this with the sensor for the garage door
    # internal: true
    # on_value:
      # then:
        # - if:
            # condition:
              # lambda: return (id(control4_item).state == "on");
            # then:
              # - lvgl.widget.update:
                  # id: but_control_4
                  # state:
                    # checked: !lambda return true;
              # - lvgl.label.update:
                        # id: ico_control_4
                        # text: "\U000F12D4" # icon for garage door open
            # else:
              # - lvgl.widget.update:
                  # id: but_control_4
                  # state:
                    # checked: !lambda return false;
              # - lvgl.label.update:
                        # id: ico_control_4
                        # text: "\U000F12D3" # icon for garage door closed

  # - platform: homeassistant
    # id: control5_item
    # entity_id: sensor.dishwasher_bsh_common_status_operationstate ## replace this with Home Connect dishwasher operation status entity
    # internal: true
    # on_value:
      # then:
        # - if:
            # condition:
              # lambda: return (id(control5_item).state != "Ready");
            # then:
              # - lvgl.widget.update:
                  # id: but_control_5
                  # state:
                    # checked: !lambda return true;
              # - if:
                  # condition:
                    # lambda: return (id(control5_item).state == "Pump off");
                  # then:
                    # - lvgl.label.update:
                        # id: ico_control_5
                        # text_color: green # color for finishing
                        # text: "\U000F0AAC" # icon for finishing
                  # else:
                    # - lvgl.label.update:
                        # id: ico_control_5
                        # text_color: yellow # color for finishing
                        # text: "\U000F0AAC" # icon for active
            # else:
              # - lvgl.widget.update:
                  # id: but_control_5
                  # state:
                    # checked: !lambda return false;
              # - lvgl.label.update:
                  # id: ico_control_5
                  # text_color: white
                  # text: "\U000F0AAC"

  # - platform: homeassistant
    # id: control5_item2
    # entity_id: binary_sensor.dishwasher_bsh_common_status_doorstate ## replace this with Home Connect dishwasher door status entity
    # internal: true
    # on_value:
      # then:
        # - if:
            # condition:
              # lambda: return (id(control5_item).state == "Ready");
            # then:
              # - lvgl.widget.update:
                  # id: but_control_5
                  # state:
                    # checked: !lambda return false;
              # - if:
                  # condition:
                    # lambda: return (id(control5_item2).state == "on");
                  # then:
                    # - lvgl.label.update:
                        # id: ico_control_5
                        # text_color: white
                        # text: "\U000F11B8" # icon for door open
                  # else:
                    # - lvgl.label.update:
                        # id: ico_control_5
                        # text_color: white
                        # text: "\U000F0AAC" # icon for door closed
    
  ##### SCENES PAGE TEXT SENSORS - Used for Screens in default UI #####
  # - platform: homeassistant
    # id: scenes1_item
    # entity_id: media_player.tv1 ## Replace this with entity for a TV/media player
    # internal: true
    # on_value:
      # then:
        # - if:
            # condition:
              # lambda: return (id(scenes1_item).state == "off");
            # then:
              # - lvgl.widget.update:
                  # id: but_scenes_1
                  # state:
                    # checked: !lambda return false;
              # - lvgl.label.update:
                        # id: ico_scenes_1
                        # text: "\U000F083B" # icon for tv off
            # else:
              # - lvgl.widget.update:
                  # id: but_scenes_1
                  # state:
                    # checked: !lambda return true;
              # - lvgl.label.update:
                        # id: ico_scenes_1
                        # text: "\U000F0502" # icon for tv on

  # - platform: homeassistant
    # id: scenes2_item
    # entity_id: media_player.tv2 ## Replace this with entity for a TV/media player
    # internal: true
    # on_value:
      # then:
        # - if:
            # condition:
              # lambda: return (id(scenes2_item).state == "off");
            # then:
              # - lvgl.widget.update:
                  # id: but_scenes_2
                  # state:
                    # checked: !lambda return false;
              # - lvgl.label.update:
                        # id: ico_scenes_2
                        # text: "\U000F083B" # icon for tv off
            # else:
              # - lvgl.widget.update:
                  # id: but_scenes_2
                  # state:
                    # checked: !lambda return true;
              # - lvgl.label.update:
                        # id: ico_scenes_2
                        # text: "\U000F0502" # icon for tv on

##### SECURITY PAGE TEXT SENSORS #####
  # - platform: homeassistant
    # id: security1_item
    # entity_id: lock.front_door ## Replace this with entity for a door lock
    # internal: true
    # on_value:
      # then:
        # - lvgl.widget.update:
            # id: but_security_1
            # state:
              # checked: !lambda return (id(security1_item).state == "locked");
        # - if:
            # condition:
              # lambda: return (id(security1_item).state == "locked");
            # then:
              # - lvgl.label.update:
                  # id: ico_security_1
                  # text_color: lime
                  # text: "\U000F033E" # icon for locked
            # else:
              # - lvgl.label.update:
                  # id: ico_security_1
                  # text_color: red
                  # text: "\U000F033F" # icon for unlocked

color:
  - id: idle_color
    hex: ${idle_illustration_background_color}
  - id: listening_color
    hex: ${listening_illustration_background_color}
  - id: thinking_color
    hex: ${thinking_illustration_background_color}
  - id: replying_color
    hex: ${replying_illustration_background_color}
  - id: loading_color
    hex: ${loading_illustration_background_color}
  - id: error_color
    hex: ${error_illustration_background_color}
  - id: active_timer_color
    hex: "26ed3a"
  - id: paused_timer_color
    hex: "3b89e3"
  - id: green
    hex: '75D15F'
  - id: red
    hex: 'FF3131'
  - id: blue
    hex: '47B7E9'
  - id: blue_drk
    hex: '085296'
  - id: amber
    hex: 'FBAB35'
  - id: lime
    hex: '20FC30'
  - id: pink
    hex: 'D92BBC'
  - id: yellow
    hex: 'FFC000'
  - id: black
    hex: '000000'
  - id: white
    hex: 'ffffff'

spi:
  - id: spi_bus
    clk_pin: 7
    mosi_pin: 6

display:
  - platform: ili9xxx
    id: s3_box_lcd
    model: S3BOX
    invert_colors: false
    data_rate: 40MHz
    cs_pin: 5
    dc_pin: 4
    reset_pin:
      number: 48
      inverted: true
    update_interval: never
    auto_clear_enabled: false

key_collector:
  - source_id: lvgl_keypad
    min_length: 4
    max_length: 12
    end_keys: "#"
    end_key_required: true
    back_keys: "*"
    allowed_keys: "0123456789*#"
    timeout: 10s
    on_progress:
      - if:
          condition:
            lambda: return (0 != x.compare(std::string{""}));
          then:
            - lambda: |-
                ESP_LOGD("LVGL Keypad", "Current PIN: %s", x.c_str());
    on_timeout:
      - lvgl.page.show: security_page
    on_result:
      - lambda: |-
          ESP_LOGD("LVGL Keypad", "Submitted PIN: %s", x.c_str());
      - if:
          condition:
            lambda: return (id(alarm_action) == "disarm");
          then:
            - homeassistant.service:
                  service: alarm_control_panel.alarm_disarm
                  data:
                    entity_id: alarm_control_panel.alarmo ## Replace with alarmo entity
                    code: !lambda return x.c_str();
      - if:
          condition:
            lambda: return (id(alarm_action) == "armhome");
          then:
            - homeassistant.service:
                  service: alarm_control_panel.alarm_arm_home
                  data:
                    entity_id: alarm_control_panel.alarmo ## Replace with alarmo entity
                    code: !lambda return x.c_str();
      - if:
          condition:
            lambda: return (id(alarm_action) == "armaway");
          then:
            - homeassistant.service:
                  service: alarm_control_panel.alarm_arm_away
                  data:
                    entity_id: alarm_control_panel.alarmo ## Replace with alarmo entity
                    code: !lambda return x.c_str();
      - if:
          condition:
            lambda: return (id(alarm_action) == "armnight");
          then:
            - homeassistant.service:
                  service: alarm_control_panel.alarm_arm_night
                  data:
                    entity_id: alarm_control_panel.alarmo ## Replace with alarmo entity
                    code: !lambda return x.c_str();
      - lambda: id(alarm_action) = "";
      - script.execute: set_alarm_status
      - lvgl.page.show: security_page
                    
########## LVGL Display UI #########
# All UI configuration is below. 
# The sequences of pages impacts the next/previous buttons.
# The UI sends actions to entities while entities send status or can change icons/colors/properties.
# This means most widgets that perform an action on an entity the corresponding entity updates the widget.
####################################
lvgl:
  id: lvgl_display
  disp_bg_color: 0x000000
  on_idle:
    - timeout: 1s
      then:
        - script.execute: saver_enabled
  pages:
    - id: idle_page
      on_swipe_left:
        - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
        - lvgl.page.next:
      on_swipe_right:
        - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
        - lvgl.page.previous:
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Home" ## Home page title
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1), FR(1)]
                    grid_rows: [FR(50), FR(50)]
                  widgets:
                    - button:
                        id: but_home_1
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        widgets:
                          - label:
                              id: ico_home_1
                              align: CENTER
                              text_font: icon_font_55
                              text_color: lightblue
                              text: "\U000F050F"
                        on_press:
                          then:
                            lvgl.page.show: climate_page
                    - button:
                        id: but_home_2
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        widgets:
                          - label:
                              id: ico_home_2
                              align: CENTER
                              text_font: icon_font_55
                              text_color: yellow
                              text: "\U000F06E8"
                        on_press:
                          then:
                            lvgl.page.show: lights_page
                    - button:
                        id: but_home_3
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        widgets:
                          - label:
                              id: ico_home_3
                              align: CENTER
                              text_font: icon_font_55
                              text_color: fuchsia
                              text: "\U000F097E"
                        on_press:
                          then:
                            lvgl.page.show: controls_page
                    - button:
                        id: but_home_4
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        widgets:
                          - label:
                              id: ico_home_4
                              align: CENTER
                              text_font: icon_font_55
                              text_color: red
                              text: "\U000F075A"
                        on_press:
                          then:
                            - lvgl.page.show: media_page
                    - button:
                        id: but_home_5
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        widgets:
                          - label:
                              id: ico_home_5
                              align: CENTER
                              text_font: icon_font_55
                              text_color: aqua
                              text: "\U000F0FCE"
                        on_press:
                          then:
                            lvgl.page.show: scenes_page
                    - button:
                        id: but_home_6
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        widgets:
                          - label:
                              id: ico_home_6
                              align: CENTER
                              text_font: icon_font_55
                              text_color: lime
                              text: "\U000F033E"
                        on_press:
                          then:
                            lvgl.page.show: security_page
    - id: climate_page
      on_swipe_left:
        - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
        - lvgl.page.next:
      on_swipe_right:
        - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
        - lvgl.page.previous:
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Climate" ## Climate page title
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1), FR(1)]
                    grid_rows: [FR(10), FR(10), FR(30), FR(10), FR(10), FR(30)]
                  widgets:
                    - label:
                        text: "Studio AC"  # Name for temperature 1 with AC
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        id: temp_climate_1
                        text: " "
                        align: CENTER
                        text_align: CENTER
                        text_color: lightblue
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_climate_1
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        checkable: true
                        widgets:
                          - label:
                              id: ico_climate_1
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F0210"
                        on_press:
                          then:
                            - lvgl.page.show: climate_studio_page
                            - delay: 1s
                            # This button is used to navigate to the ac page but also show ac status, so when we click to navigate we correct the button state 
                            # - if:
                                # condition:
                                  # not:
                                    # lambda: return (id(climate1_item).state == "off");
                                # then:
                                  # - lvgl.widget.update:
                                      # id: but_climate_1
                                      # state:
                                        # checked: true
                    - label:
                        text: "Room 2" # Name for temperature 2
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        id: temp_climate_2
                        text: " "
                        align: CENTER
                        text_align: CENTER
                        text_color: lightblue
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        text_font: icon_font_55
                        text: "\U000F050F"
                        align: CENTER
                        text_align: CENTER
                        text_color: lightblue
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        text: "Room 3" # Name for temperature 3
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        id: temp_climate_3
                        text: " "
                        align: CENTER
                        text_align: CENTER
                        text_color: lightblue
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        text_font: icon_font_55
                        text: "\U000F050F"
                        align: CENTER
                        text_align: CENTER
                        text_color: lightblue
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        text: "Room 4" # Name for temperature 4
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 3
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        id: temp_climate_4
                        text: " "
                        align: CENTER
                        text_align: CENTER
                        text_color: lightblue
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 4
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        text_font: icon_font_55
                        text: "\U000F050F"
                        align: CENTER
                        text_align: CENTER
                        text_color: lightblue
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 5
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        text: "Room 5" # Name for temperature 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 3
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        id: temp_climate_5
                        text: " "
                        align: CENTER
                        text_align: CENTER
                        text_color: lightblue
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 4
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        text_font: icon_font_55
                        text: "\U000F050F"
                        align: CENTER
                        text_align: CENTER
                        text_color: lightblue
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 5
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        text: "Room 6" # Name for temperature 6
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 3
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        id: temp_climate_6
                        text: " "
                        align: CENTER
                        text_align: CENTER
                        text_color: lightblue
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 4
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        text_font: icon_font_55
                        text: "\U000F050F"
                        align: CENTER
                        text_align: CENTER
                        text_color: lightblue
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 5
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH

    - id: climate_studio_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Studio AC" ## Climate AC page title
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1), FR(1)]
                    grid_rows: [FR(10), FR(40), FR(10), FR(40)]
                  widgets:
                    - label:
                        text: "Studio AC" # Name for temperature 1 with AC
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_studioac_1
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        checkable: true
                        widgets:
                          - label:
                              id: ico_studioac_1
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F0210"
                        # on_release:
                          # then:
                            # - homeassistant.service:
                                # service: climate.toggle
                                # data:
                                  # entity_id: climate.air_conditioner ## replace this with the entity of your air conditioner
                    - label:
                        text: "Current Temp"
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        text: " "
                        id: studioac_currenttemp
                        align: CENTER
                        text_align: CENTER
                        text_color: blue
                        text_font: my_font18
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 1
                        grid_cell_x_align: CENTER
                        grid_cell_y_align: CENTER
                    - label:
                        text: "Target Temp"
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - label:
                        text: " "
                        id: studioac_targettemp
                        align: CENTER
                        text_align: CENTER
                        text_color: blue
                        text_font: my_font18
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 1
                        grid_cell_x_align: CENTER
                        grid_cell_y_align: CENTER
              - obj:
                  align: CENTER
                  bg_color: 0x000000
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  width: 90%
                  height: 80
                  y: 70
                  pad_all: 0
                  layout:
                    type: FLEX
                    flex_flow: ROW
                    flex_align_cross: CENTER
                  widgets:
                    - dropdown:
                        id: dropdown_studioacmode
                        options: # these are the available AC modes to show in the dropdown
                          - "Off"
                          - Auto
                          - Heat
                          - Cool
                          - Dry
                        dropdown_list:
                          selected:
                            checked:
                              text_color: 0xFF0000
                        ## When a mode is selected send a corresponding action to set an hvac mode
                        # on_value:
                          # - if:
                              # condition:
                                # lambda: return (x == 0);
                              # then:
                                # - homeassistant.service:
                                    # service: climate.set_hvac_mode
                                    # data:
                                      # entity_id: climate.air_conditioner ## replace this with the entity of your air conditioner
                                      # hvac_mode: "off"
                          # - if:
                              # condition:
                                # lambda: return (x == 1);
                              # then:
                                # - homeassistant.service:
                                    # service: climate.set_hvac_mode
                                    # data:
                                      # entity_id: climate.air_conditioner ## replace this with the entity of your air conditioner
                                      # hvac_mode: heat_cool
                          # - if:
                              # condition:
                                # lambda: return (x == 2);
                              # then:
                                # - homeassistant.service:
                                    # service: climate.set_hvac_mode
                                    # data:
                                      # entity_id: climate.air_conditioner ## replace this with the entity of your air conditioner
                                      # hvac_mode: heat
                          # - if:
                              # condition:
                                # lambda: return (x == 3);
                              # then:
                                # - homeassistant.service:
                                    # service: climate.set_hvac_mode
                                    # data:
                                      # entity_id: climate.air_conditioner ## replace this with the entity of your air conditioner
                                      # hvac_mode: Cool
                          # - if:
                              # condition:
                                # lambda: return (x == 4);
                              # then:
                                # - homeassistant.service:
                                    # service: climate.set_hvac_mode
                                    # data:
                                      # entity_id: climate.air_conditioner ## replace this with the entity of your air conditioner
                                      # hvac_mode: dry
                    - button:
                        id: studioac_spin_down
                        on_click:
                          - lvgl.spinbox.decrement: spinbox_studioac
                        widgets:
                          - label:
                               text: "-"
                    - spinbox:
                        id: spinbox_studioac
                        align: CENTER
                        text_align: CENTER
                        width: 50
                        range_from: 16
                        range_to: 31
                        step: 1
                        rollover: false
                        digits: 3
                        decimal_places: 1
                        ## Change the temperature of your AC when the spinbox is updated
                        # on_change:
                          # then:
                            # - homeassistant.service:
                                # service: climate.set_temperature
                                # data:
                                  # entity_id: climate.air_conditioner ## replace this with the entity of your air conditioner
                                # data_template:
                                  # temperature: '{{ my_variable }}'
                                # variables:
                                  # my_variable: |-
                                    # return x;
                    - button:
                        id: studioac_spin_up
                        on_click:
                          - lvgl.spinbox.increment: spinbox_studioac
                        widgets:
                          - label:
                              text: "+"
                                     
    - id: lights_page
      on_swipe_left:
        - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
        - lvgl.page.next:
      on_swipe_right:
        - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
        - lvgl.page.previous:
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Lights" ## Lights page title
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1), FR(1)]
                    grid_rows: [FR(10), FR(40), FR(10), FR(40)]
                  widgets:
                    - label:
                        text: "Light 1" ## Light 1 Name
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_light_1
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        checkable: true
                        widgets:
                          - label:
                              id: ico_light_1
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F0335"
                        ## Light 1 toggle
                        ## This uses a switch toggle as it controls a smart switch 
                        # on_release:
                        # - homeassistant.action:
                            # action: switch.toggle
                            # data:
                              # entity_id: switch.light1 ## replace with entity to toggle
                    - label:
                        text: "Light 2" ## Light 2 Name
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_light_2
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        checkable: true
                        widgets:
                          - label:
                              id: ico_light_2
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F0335"
                        ## Light 2 toggle
                        ## This uses a switch toggle as it controls a smart switch 
                        # on_release:
                        # - homeassistant.action:
                            # action: switch.toggle
                            # data:
                              # entity_id: switch.light2 ## replace with entity to toggle
                    - label:
                        text: "Light 3" ## Light 3 Name
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_light_3
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        checkable: true
                        widgets:
                          - label:
                              id: ico_light_3
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F0335"
                        ## Light 3 toggle
                        ## This uses a light toggle as it controls a smart globe 
                        # on_release:
                        # - homeassistant.action:
                            # action: light.toggle
                            # data:
                              # entity_id: light.light3 ## replace with entity to toggle
                    - label:
                        text: "Light 4" ## Light 4 Name
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_light_4
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 3
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        checkable: true
                        widgets:
                          - label:
                              id: ico_light_4
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F0335"
                        ## Light 4 toggle
                        ## This uses a switch toggle as it controls a smart switch 
                        # on_release:
                        # - homeassistant.action:
                            # action: switch.toggle
                            # data:
                              # entity_id: switch.light4 ## replace with entity to toggle
                    - label:
                        text: "Light 5" ## Light 5 Name
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_light_5
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 3
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        checkable: true
                        widgets:
                          - label:
                              id: ico_light_5
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F0335"
                        ## Light 5 toggle
                        ## This uses a switch toggle as it controls a smart switch 
                        # on_release:
                        # - homeassistant.action:
                            # action: switch.toggle
                            # data:
                              # entity_id: switch.light5 ## replace with entity to toggle
                    - label:
                        text: "Light 6" ## Light 6 Name
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_light_6
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 3
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        checkable: true
                        widgets:
                          - label:
                              id: ico_light_6
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F0335"
                        ## Light 6 toggle
                        ## This uses a light toggle as it controls a smart globe 
                        # on_release:
                        # - homeassistant.action:
                            # action: light.toggle
                            # data:
                              # entity_id: light.light6

    - id: controls_page
      on_swipe_left:
        - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
        - lvgl.page.next:
      on_swipe_right:
        - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
        - lvgl.page.previous:
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Controls" ## Controls page title
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1), FR(1)]
                    grid_rows: [FR(10), FR(40), FR(10), FR(40)]
                  widgets:
                    - label:
                        text: "Kettle" ## Control 1 Name
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_control_1
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        checkable: true
                        widgets:
                          - label:
                              id: ico_control_1
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F05FA"
                        ## Control 1 toggle switch
                        # on_release:
                        # - homeassistant.action:
                            # action: switch.toggle
                            # data:
                              # entity_id: switch.kettle_start
                    - label:
                        text: "Vacuum" ## Control 2 Name
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_control_2
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        checkable: true
                        widgets:
                          - label:
                              id: ico_control_2
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F070D"
                        ## Control 2 action
                        ## For Vacuum this can start vaccuming or return to base
                        # on_release:
                          # - if:
                              # condition:
                                # lambda: 'return id(control2_item).state == "docked";'
                              # then:
                                # - homeassistant.service:
                                    # service: vacuum.start
                                    # data:
                                      # entity_id: vacuum.vacuum_cleaner ## Replace this with the entity for a vacuum cleaner
                              # else: 
                                # - homeassistant.service:
                                    # service: vacuum.return_to_base
                                    # data:
                                      # entity_id: vacuum.vacuum_cleaner ## Replace this with the entity for a vacuum cleaner
                    - label:
                        text: "Garage" ## Control 3 Name
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_control_4
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 3
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        checkable: true
                        widgets:
                          - label:
                              id: ico_control_4
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F12D3"
                        ## Control 3 switch toggle
                        # on_release:
                        # - homeassistant.action:
                            # action: switch.toggle
                            # data:
                              # entity_id: switch.garage ## replace this with entity to open/close garage
                    - label:
                        text: "Dishwasher" ## Control 4 Name
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_control_5
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 3
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        checkable: true
                        widgets:
                          - label:
                              id: ico_control_5
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F0AAC"
                        ## Control 4 action
                        ## For dishwasher this can trigger a preferred program when selected or stop if running
                        # on_release:
                          # - if:
                              # condition:
                                # lambda: 'return id(control5_item).state == "Ready" && id(control5_item2).state == "off";'
                              # then:
                                # - homeassistant.action:
                                    # action: select.select_option
                                    # data:
                                      # entity_id: select.dishwasher_programs ## Replace this with select entity to set program mode
                                      # option: "Quick 1h"  ## Desired default program when started
                                # - delay: 4s
                                # - homeassistant.service:
                                    # service: button.press
                                    # data:
                                      # entity_id: button.dishwasher_start_pause ## Replace this with entity to start dishwasher
                              # else:
                                # - homeassistant.service:
                                    # service: button.press
                                    # data:
                                      # entity_id: button.dishwasher_stop ## Replace this with entity to stop dishwasher

    - id: media_page
      on_swipe_left:
        - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
        - lvgl.page.next:
      on_swipe_right:
        - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
        - lvgl.page.previous:
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Media" ## Media page title
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  id: obj_media
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1), FR(1)]
                    grid_rows: [FR(34), FR(33), FR(33)]
                  widgets:
                    - label:
                        id: ico_media_1
                        text: "\U000F075E"
                        text_font: icon_font_55
                        align: CENTER
                        text_align: CENTER
                        text_color: blue
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        on_release:
                          then:
                            - lambda: |-
                                if (id(speaker_volume) > 0) {
                                  id(speaker_volume) -= 1;
                                }
                            - script.execute: set_volume
                    - label:
                        id: ico_media_2
                        text: "\U000F040E"
                        text_font: icon_font_55
                        align: CENTER
                        text_align: CENTER
                        text_color: blue
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        on_release:
                          then:
                            - if:
                                condition:
                                  media_player.is_idle:
                                then:
                                  - media_player.play
                                else:
                                  - media_player.stop
                    - label:
                        id: ico_media_3
                        text: "\U000F075D"
                        text_font: icon_font_55
                        align: CENTER
                        text_align: CENTER
                        text_color: blue
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        on_release:
                          then:
                            - lambda: |-
                                if (id(speaker_volume) < 10) {
                                  id(speaker_volume) += 1;
                                }
                            - script.execute: set_volume
                    - label:
                        id: lbl_media_mute
                        text: "\U000F057E"
                        text_font: icon_font_55
                        align: CENTER
                        text_align: CENTER
                        text_color: lime
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        on_release:
                          then:
                            - switch.toggle: media_mute
              - label:
                  id: lbl_media_playing
                  align: CENTER
                  text_align: CENTER
                  text_font: my_font18
                  text: "Nothing Playing"
                  text_color: lightblue
                  y: -45
              - bar:
                  id: bar_volume
                  align: CENTER          
                  height: 4
                  width: 100%
                  y: 85
                  bg_color: 0x000000
                  bg_opa: TRANSP
                  indicator:
                    bg_color: lime
                  value: 100
                  min_value: 0
                  max_value: 100
              - obj:
                  id: obj_ext_media
                  hidden: true
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1), FR(1)]
                    grid_rows: [FR(34), FR(33), FR(33)]
                  widgets:
                    - label:
                        id: ico_ext_media_1
                        text: "\U000F04AE"
                        text_font: icon_font_55
                        align: CENTER
                        text_align: CENTER
                        text_color: blue
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        on_release:
                          then:
                            - homeassistant.service:
                                service: media_player.media_previous_track
                                data:
                                  entity_id: media_player.${external_media_player}
                    - label:
                        id: ico_ext_media_2
                        text: "\U000F040E"
                        text_font: icon_font_55
                        align: CENTER
                        text_align: CENTER
                        text_color: blue
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        on_release:
                          then:
                            - homeassistant.service:
                                service: media_player.media_pause
                                data:
                                  entity_id: media_player.${external_media_player}
                    - label:
                        id: ico_ext_media_3
                        text: "\U000F04AD"
                        text_font: icon_font_55
                        align: CENTER
                        text_align: CENTER
                        text_color: blue
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        on_release:
                          then:
                            - homeassistant.service:
                                service: media_player.media_next_track
                                data:
                                  entity_id: media_player.${external_media_player}
                    - label:
                        id: ico_ext_media_4
                        text: "\U000F075E"
                        text_font: icon_font_55
                        align: CENTER
                        text_align: CENTER
                        text_color: blue
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        on_release:
                          then:
                            - homeassistant.service:
                                service: media_player.volume_down
                                data:
                                  entity_id: media_player.${external_media_player}
                    - label:
                        id: lbl_ext_media_mute
                        text: "\U000F057E"
                        text_font: icon_font_55
                        align: CENTER
                        text_align: CENTER
                        text_color: lime
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        on_release:
                          then:
                            - switch.toggle: ext_media_mute
                    - label:
                        id: ico_ext_media_6
                        text: "\U000F075D"
                        text_font: icon_font_55
                        align: CENTER
                        text_align: CENTER
                        text_color: blue
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        on_release:
                          then:
                            - homeassistant.service:
                                service: media_player.volume_up
                                data:
                                  entity_id: media_player.${external_media_player}
              - label:
                  id: lbl_ext_media_playing
                  hidden: true
                  align: CENTER
                  text_align: CENTER
                  text_font: my_font18
                  text: "Nothing Playing"
                  text_color: lightblue
                  y: -45
 
    - id: scenes_page
      on_swipe_left:
        - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
        - lvgl.page.next:
      on_swipe_right:
        - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
        - lvgl.page.previous:
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Screens" ## Scenes page title
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1), FR(1)]
                    grid_rows: [FR(10), FR(40),FR(10), FR(40)]
                  widgets:
                    - label:
                        text: "TV1" ## scene 1 title
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_scenes_1
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        checkable: true
                        widgets:
                          - label:
                              id: ico_scenes_1
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F083B"
                        ## Scene 1 action
                        # on_release:
                          # then:
                            # - if:
                                # condition:
                                  # lambda: return (id(scenes1_item).state == "off");
                                # then:
                                  # - homeassistant.service:
                                      # service: media_player.turn_on
                                      # data:
                                        # entity_id: media_player.tv1
                                # else: 
                                  # - homeassistant.service:
                                      # service: media_player.turn_off
                                      # data:
                                        # entity_id: media_player.tv1
                    - label:
                        text: "TV2" ## scene 2 title
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_scenes_2
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        checkable: true
                        widgets:
                          - label:
                              id: ico_scenes_2
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F083B"
                        ## Scene 2 action
                        # on_release:
                          # then:
                            # - if:
                                # condition:
                                  # lambda: return (id(scenes2_item).state == "off");
                                # then:
                                  # - homeassistant.service:
                                      # service: media_player.turn_on
                                      # data:
                                        # entity_id: media_player.tv2
                                # else: 
                                  # - homeassistant.service:
                                      # service: media_player.turn_off
                                      # data:
                                        # entity_id: media_player.tv2

    - id: security_page
      on_swipe_left:
        - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
        - lvgl.page.next:
      on_swipe_right:
        - lambda: 'lv_indev_wait_release(lv_indev_get_act());'
        - lvgl.page.previous:
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Security" ## Security Page Title
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1), FR(1)]
                    grid_rows: [FR(10), FR(40), FR(10), FR(40)]
                  widgets:
                    - label:
                        text: "Front Door" ## Name of Door Lock
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_security_1
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        checkable: true
                        widgets:
                          - label:
                              id: ico_security_1
                              align: CENTER
                              text_font: icon_font_55
                              text_color: lime
                              text: "\U000F033E"
                        ## Security Door Lock Action
                        # on_release:
                          # then:
                            # if:
                              # condition:
                                # lambda: return (id(security1_item).state == "locked");
                              # then:
                                # - homeassistant.action:
                                    # action: lock.unlock
                                    # data:
                                      # entity_id: lock.front_door ## Replace this with lock entity
                              # else:
                                # - homeassistant.action:
                                    # action: lock.lock
                                    # data:
                                      # entity_id: lock.front_door ## Replace this with lock entity
              - buttonmatrix:
                  align: CENTER
                  width: 100%
                  height: 60
                  y: 45
                  bg_opa: TRANSP
                  border_color: 0x0077b3
                  border_width: 0
                  text_color: 0xFFFFFF
                  pad_all: 6
                  id: btn_mx_alarm
                  one_checked: true
                  items:
                    text_font: icon_font_55
                    text_color: 0xFFFFFF
                    bg_color: 0x000000
                    border_color: 0x000000
                    border_width: 0
                    checked:
                      text_color: lime
                  rows:
                    - buttons:
                      - id: but_disarm
                        width: 1
                        control:
                          checkable: true
                          recolor: true
                        text: "#FF0000 \U000F099E#"
                        on_press:
                          - if:
                              condition:
                                lambda: return (id(alarm_status).state != "disarmed");
                              then:
                                - lambda: |-
                                    id(alarm_action) = "disarm";
                                - lvgl.page.show: alarm_keypad_page
                      - id: but_armhome
                        width: 1
                        control:
                          checkable: true
                        text: "\U000F068A"
                        on_release:
                          - if:
                              condition:
                                lambda: return (id(alarm_status).state == "disarmed");
                              then:
                                - homeassistant.service:
                                    service: alarm_control_panel.alarm_arm_home
                                    data:
                                      entity_id: alarm_control_panel.alarmo ## Replace with alarmo entity
                                - script.execute: set_alarm_status
                              else:
                                - lambda: |-
                                    id(alarm_action) = "armhome";
                                - lvgl.page.show: alarm_keypad_page
                      - id: but_armaway
                        width: 1
                        control:
                          checkable: true
                        text: "\U000F099D"
                        on_release:
                          - if:
                              condition:
                                lambda: return (id(alarm_status).state == "disarmed");
                              then:
                                - homeassistant.service:
                                    service: alarm_control_panel.alarm_arm_away
                                    data:
                                      entity_id: alarm_control_panel.alarmo ## Replace with alarmo entity
                                - script.execute: set_alarm_status
                              else:
                                - lambda: |-
                                    id(alarm_action) = "armaway";
                                - lvgl.page.show: alarm_keypad_page
                      - id: but_armnight
                        width: 1
                        control:
                          checkable: true
                        text: "\U000F1828"
                        on_release:
                          - if:
                              condition:
                                lambda: return (id(alarm_status).state == "disarmed");
                              then:
                                - homeassistant.service:
                                    service: alarm_control_panel.alarm_arm_night
                                    data:
                                      entity_id: alarm_control_panel.alarmo ## Replace with alarmo entity
                                - script.execute: set_alarm_status
                              else:
                                - lambda: |-
                                    id(alarm_action) = "armnight";
                                - lvgl.page.show: alarm_keypad_page
              - label:
                  id: lbl_alarm_status
                  text: " "
                  align: CENTER
                  text_align: CENTER
                  text_color: lightblue
                  text_font: my_font16
                  x: 45
                  y: -40

    - id: alarm_keypad_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Code"
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
        - buttonmatrix:
            id: lvgl_keypad
            x: 10
            y: 35
            width: 300
            height: 170
            items:
              text_font: montserrat_20
              pressed:
                bg_color: 0xFFFF00
            rows:
              - buttons:
                  - text: 1
                    control:
                      no_repeat: true
                  - text: 2
                    control:
                      no_repeat: true
                  - text: 3
                    control:
                      no_repeat: true
              - buttons:
                  - text: 4
                    control:
                      no_repeat: true
                  - text: 5
                    control:
                      no_repeat: true
                  - text: 6
                    control:
                      no_repeat: true
              - buttons:
                  - text: 7
                    control:
                      no_repeat: true
                  - text: 8
                    control:
                      no_repeat: true
                  - text: 9
                    control:
                      no_repeat: true
              - buttons:
                  - text: "\uF55A"
                    key_code: "*"
                    control:
                      no_repeat: true
                  - text: 0
                    control:
                      no_repeat: true
                  - text: "\uF00C"
                    key_code: "#"
                    control:
                      no_repeat: true
                        
    - id: saver_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: " "
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
        - obj: # clock analog
            id: analog
            height: SIZE_CONTENT
            width: 100%
            align: CENTER
            pad_all: 0
            border_width: 0
            bg_color: 0x000000
            widgets:
              - meter: 
                  id: clockface
                  height: 170
                  width: 170
                  align: CENTER
                  bg_opa: TRANSP
                  border_width: 0
                  text_color: 0xFFFFFF
                  scales:
                    - range_from: 0
                      range_to: 60
                      angle_range: 360
                      rotation: 270
                      ticks:
                        width: 1
                        count: 61
                        length: 10
                        color: 0xFFFFFF
                      indicators:
                        - line:
                            id: minute_hand
                            width: 3
                            color: 0xFFFFFF
                            r_mod: -4
                            value: 0
                    - range_from: 1
                      range_to: 12
                      angle_range: 330
                      rotation: 300
                      ticks:
                        width: 1
                        count: 12
                        length: 1
                        major:
                          stride: 1
                          width: 4
                          length: 10
                          color: 0xcccccc
                          label_gap: 12
                    - range_from: 0
                      range_to: 720
                      angle_range: 360
                      rotation: 270
                      ticks:
                        count: 0
                      indicators:
                        - line:
                            id: hour_hand
                            width: 5
                            color: 0xFFFFFF
                            r_mod: -30
                            value: 0
              - label:
                  id: day_label
                  align: CENTER
                  text_align: CENTER
                  styles: clock_style
                  y: -25
              - label:
                  id: date_label
                  align: CENTER
                  text_align: CENTER
                  styles: clock_style
                  y: 25
        - obj: # clock digital
            id: digital
            hidden: true
            height: 170
            width: 100%
            align: CENTER
            pad_all: 0
            border_width: 0
            bg_color: 0x000000
            widgets:
              - label:
                  id: digitaltime
                  align: CENTER
                  text_align: CENTER
                  text_color: 0xFFFFFF
                  text_font: my_font60    
              - label:
                  id: daydate_label
                  align: CENTER
                  text_align: CENTER
                  text_color: 0xFFFFFF
                  text_font: my_font22                  
                  y: 45
        - label:
            id: temp_label
            hidden: true
            align: TOP_LEFT
            text_align: LEFT
            styles: clock_style
            text_color: lightblue
            text_font: my_font18
            x: 15
            y: 40
        - label:
            id: humidity_label
            hidden: true
            align: TOP_RIGHT
            text_align: RIGHT
            styles: clock_style
            text_color: lightblue
            text_font: my_font18
            x: -15
            y: 40

    - id: listening_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - image:
                  id: listening
                  align: CENTER
                  src: listening_img
              - animimg:
                  id: listening_anim
                  auto_start: false
                  repeat_count: 200
                  hidden: true
                  align: CENTER
                  src: [ anim_listening1, anim_listening2 ]
                  duration: 750ms
              - image:
                  id: listening_anim2
                  hidden: true
                  align: CENTER
                  src: anim2_listening
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: " "
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF

    - id: thinking_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - image:
                  id: thinking
                  align: CENTER
                  src: thinking_img
              - animimg:
                  id: thinking_anim
                  auto_start: false
                  repeat_count: 400
                  hidden: true
                  align: CENTER
                  src: [ anim_listening2, anim_thinking1, anim_thinking2 ]
                  duration: 500ms
              - image:
                  id: thinking_anim2
                  hidden: true
                  align: CENTER
                  src: anim2_thinking
              - label: 
                  id: lbl_v_text_request1
                  align: TOP_MID
                  text_align: left
                  text_color: 0x000000
                  text_font: my_font16
                  long_mode: DOT
                  bg_color: 0xFFFFFF
                  bg_opa: COVER
                  pad_left: 5
                  pad_right: 5
                  x: 0
                  y: 35
                  height: 15
                  width: 90%
                  text: " "
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: " "
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF

    - id: replying_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - image:
                  id: replying
                  align: CENTER
                  src: replying_img
              - animimg:
                  id: replying_anim
                  auto_start: false
                  repeat_count: 1000
                  hidden: true
                  align: CENTER
                  src: [ anim_thinking2, anim_replying1, anim_replying2 ]
                  duration: 300ms
              - animimg:
                  id: replying_anim2
                  auto_start: false
                  repeat_count: 1000
                  hidden: true
                  align: CENTER
                  src: [ anim2_thinking, anim2_replying1, anim2_replying2, anim2_replying3, anim2_replying4, anim2_replying4 ]
                  duration: 750ms
              - label: 
                  id: lbl_v_text_request2
                  align: TOP_MID
                  text_align: left
                  text_color: 0x000000
                  text_font: my_font16
                  long_mode: DOT
                  bg_color: 0xFFFFFF
                  bg_opa: COVER
                  pad_left: 5
                  pad_right: 5
                  x: 0
                  y: 35
                  height: 15
                  width: 90%
                  text: " "
              - label: 
                  id: lbl_v_text_response
                  align: BOTTOM_MID
                  text_align: left
                  text_color: 0x000000
                  text_font: my_font16
                  long_mode: DOT
                  bg_color: 0xFFFFFF
                  bg_opa: COVER
                  pad_left: 5
                  pad_right: 5
                  x: 0
                  y: -35
                  height: 15
                  width: 90%
                  text: " "
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: " "
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF

    - id: error_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - image:
                  id: error
                  align: CENTER
                  src: error_img
              - image:
                  id: error_anim
                  hidden: true
                  align: CENTER
                  src: anim_error1
              - image:
                  id: error_anim2
                  hidden: true
                  align: CENTER
                  src: anim2_error
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: " "
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF

    - id: time_remaining_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - label:
                  id: lbl_time_remaining
                  align: CENTER
                  text_align: CENTER
                  text_color: 0xFFFFFF
                  text_font: my_font40
                  text: " "
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Timer"
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF

    - id: timer_finished_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: " "
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  align: CENTER
                  width: 100%
                  height: 170
                  pad_all: 4
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 4
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1)]
                    grid_rows: [FR(50), FR(25), FR(25)]
                  widgets:
                    - label:
                        text: "\U000F009E"
                        align: CENTER
                        text_align: CENTER
                        text_font: icon_font_80
                        text_color: lightblue
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        on_press:
                          then:
                            - switch.turn_off: timer_ringing
                            - lvgl.page.show: idle_page
                    - label:
                        text: "Tap screen to dismiss"
                        align: CENTER
                        text_align: CENTER
                        text_font: my_font22
                        text_color: lightblue
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        on_press:
                          then:
                            - lvgl.widget.hide: but_snooze
                            - switch.turn_off: timer_ringing
                            - lambda: id(alarmclock_ringing) = false;
                            - lvgl.page.show: idle_page
                    - button:
                        id: but_snooze
                        hidden: true
                        bg_color: 0x2F8CD8
                        bg_grad_color: 0x005782
                        bg_grad_dir: VER
                        pressed:
                          bg_color: 0x006699
                          bg_grad_color: 0x00334d
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 2
                        grid_cell_x_align: CENTER
                        grid_cell_y_align: CENTER
                        width: 50%
                        widgets:
                          - label:
                              id: ico_snooze
                              text_font: icon_font_20
                              align: CENTER
                              text: "\U000F068E"
                        on_press:
                          - lvgl.widget.hide: but_snooze
                          - switch.turn_off: timer_ringing
                          - script.execute: snoozealarm
                          - lvgl.page.show: idle_page

    - id: notification_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Notification"
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - textarea:
                  id: area_notification
                  text: " "
                  align: CENTER
                  height: 180
                  width: 100%
                  text_font: my_font22
                  text_align: CENTER
                  bg_color: 0x000000
                  border_color: 0x000000
                  text_color: 0xFFFFFF              

    - id: ota_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "OTA"
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - label:
                  text: "Upgrade in Progress"
                  align: CENTER
                  text_align: CENTER
                  text_color: 0xFFFFFF
                  y: -10

    - id: settings_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Settings"
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1), FR(1)]
                    grid_rows: [FR(10), FR(40), FR(10), FR(40)]
                  widgets:
                    - label:
                        text: "Voice"
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_settings_1
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        widgets:
                          - label:
                              id: ico_settings_1
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F036F"
                        on_press:
                          - lvgl.page.show: voice_set_page
                    - label:
                        text: "Screensaver"
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_settings_2
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        widgets:
                          - label:
                              id: ico_settings_2
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F0D90"
                        on_press:
                          - lvgl.page.show: ss_set_page
                    - label:
                        text: "Info"
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_settings_3
                        grid_cell_column_pos: 2
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        widgets:
                          - label:
                              id: ico_settings_3
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F1C6F"
                        on_press:
                          - lvgl.page.show: info_page
                    - label:
                        text: "Device"
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_settings_4
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 3
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        widgets:
                          - label:
                              id: ico_settings_4
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F08D6"
                        on_press:
                          - lvgl.page.show: device_set_page
                    - label:
                        text: "UI"
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                    - button:
                        id: but_settings_5
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 3
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        widgets:
                          - label:
                              id: ico_settings_5
                              align: CENTER
                              text_font: icon_font_55
                              text: "\U000F0502"
                        on_press:
                          - lvgl.page.show: ui_set_page

    - id: voice_set_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Voice"
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1)]
                    grid_rows: [FR(25), FR(25), FR(25), FR(25)]
                  widgets:
                    - label:
                        text: "Wakeword Location"
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 0
                        grid_cell_x_align: END
                        grid_cell_y_align: CENTER
                    - dropdown:
                        id: dropdown_wakeword
                        align: CENTER
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        options:
                          - In Home Assistant
                          - On Device
                        dropdown_list:
                          selected:
                            checked:
                              text_color: 0xFF0000
                        on_value:
                          - if:
                              condition:
                                lambda: return (x == 0);
                              then:
                                - select.set_index:
                                    id: wake_word_engine_location
                                    index: 0
                              else:
                                - select.set_index:
                                    id: wake_word_engine_location
                                    index: 1
                        
                    - checkbox:
                        id: chk_mute_reponse
                        text: "Mute Responses"
                        align: LEFT_MID
                        text_align: LEFT
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 1
                        grid_cell_x_align: START
                        grid_cell_y_align: CENTER
                        on_change:
                          switch.toggle: mute_response_switch
                    - checkbox:
                        id: chk_wake_sound
                        text: "Wake Sound"
                        align: LEFT_MID
                        text_align: LEFT
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 2
                        grid_cell_x_align: START
                        grid_cell_y_align: CENTER
                        on_change:
                          switch.toggle: wake_sound
                    - checkbox:
                        id: chk_display_conversation
                        text: "Show Responses"
                        align: LEFT_MID
                        text_align: LEFT
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 3
                        grid_cell_x_align: START
                        grid_cell_y_align: CENTER
                        on_change:
                          switch.toggle: display_conversation
                        
    - id: ss_set_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Screensaver"
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1)]
                    grid_rows: [FR(25), FR(25), FR(25), FR(25)]
                  widgets:
                    - checkbox:
                        id: chk_screensaver
                        text: "Screensaver"
                        align: LEFT_MID
                        text_align: LEFT
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 0
                        grid_cell_x_align: START
                        grid_cell_y_align: CENTER
                        on_change:
                          switch.toggle: s_saver
                    - button:
                        id: but_ss_set_1
                        bg_color: 0x2F8CD8
                        bg_grad_color: 0x005782
                        bg_grad_dir: VER
                        pressed:
                          bg_color: 0x006699
                          bg_grad_color: 0x00334d
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 0
                        grid_cell_x_align: CENTER
                        grid_cell_y_align: CENTER
                        widgets:
                          - label:
                              id: ico_ss_set_1
                              align: CENTER
                              text: "Settings"
                        on_press:
                          - lvgl.page.show: timeout_settings_page
                    - checkbox:
                        id: chk_wake_presence
                        text: "Wake On Presence"
                        align: LEFT_MID
                        text_align: LEFT
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 1
                        grid_cell_x_align: START
                        grid_cell_y_align: CENTER
                        on_change:
                          switch.toggle: s_saver_presc
                    - checkbox:
                        id: chk_timeout_blank
                        text: "Turn Screen Off"
                        align: LEFT_MID
                        text_align: LEFT
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 2
                        grid_cell_x_align: START
                        grid_cell_y_align: CENTER
                        on_change:
                          switch.toggle: s_saver_mode

    - id: timeout_settings_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Screensaver"
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1)]
                    grid_rows: [FR(10), FR(40), FR(10), FR(40)]
                  widgets:
                    - label:
                        text: "Delay Secs"
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 0
                        grid_cell_x_align: CENTER
                        grid_cell_y_align: CENTER
                    - obj:
                         align: CENTER
                         grid_cell_column_pos: 0
                         grid_cell_row_pos: 1
                         grid_cell_x_align: STRETCH
                         grid_cell_y_align: STRETCH
                         bg_color: 0x000000
                         bg_opa: TRANSP
                         border_opa: TRANSP
                         width: 100%
                         height: 100%
                         pad_all: 0
                         layout:
                           type: FLEX
                           flex_flow: ROW
                           flex_align_cross: CENTER
                         widgets:
                           - button:
                               id: delay_spin_down
                               on_click:
                                 - lvgl.spinbox.decrement: spinbox_delay
                               widgets:
                                 - label:
                                      text: "-"
                           - spinbox:
                               id: spinbox_delay
                               align: CENTER
                               text_align: CENTER
                               width: 50
                               range_from: 10
                               range_to: 999999
                               step: 5
                               rollover: false
                               digits: 4
                               decimal_places: 0
                               on_value:
                                 then:
                                   if: 
                                     condition:
                                       lambda: return (x != id(s_saver_delay).state);
                                     then:
                                       - number.set:
                                           id: s_saver_delay
                                           value: !lambda return x;
                           - button:
                               id: delay_spin_up
                               on_click:
                                 - lvgl.spinbox.increment: spinbox_delay
                               widgets:
                                 - label:
                                     text: "+" 
                    - label:
                        text: "Screen Off Delay"
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 0
                        grid_cell_x_align: CENTER
                        grid_cell_y_align: CENTER
                    - obj:
                         align: CENTER
                         grid_cell_column_pos: 1
                         grid_cell_row_pos: 1
                         grid_cell_x_align: STRETCH
                         grid_cell_y_align: STRETCH
                         bg_color: 0x000000
                         bg_opa: TRANSP
                         border_opa: TRANSP
                         width: 100%
                         height: 100%
                         pad_all: 0
                         layout:
                           type: FLEX
                           flex_flow: ROW
                           flex_align_cross: CENTER
                         widgets:
                           - button:
                               id: scr_delay_spin_down
                               on_click:
                                 - lvgl.spinbox.decrement: spinbox_scr_delay
                               widgets:
                                 - label:
                                      text: "-"
                           - spinbox:
                               id: spinbox_scr_delay
                               align: CENTER
                               text_align: CENTER
                               width: 50
                               range_from: 10
                               range_to: 999999
                               step: 5
                               rollover: false
                               digits: 4
                               decimal_places: 0
                               on_value:
                                 then:
                                   if: 
                                     condition:
                                       lambda: return (x != id(s_saver_blank_delay).state);
                                     then:
                                       - number.set:
                                           id: s_saver_blank_delay
                                           value: !lambda return x;
                           - button:
                               id: scr_delay_spin_up
                               on_click:
                                 - lvgl.spinbox.increment: spinbox_scr_delay
                               widgets:
                                 - label:
                                     text: "+"
              - obj:
                   align: CENTER
                   y: 75
                   bg_color: 0x000000
                   bg_opa: TRANSP
                   border_opa: TRANSP
                   width: 90%
                   height: 50
                   pad_all: 0
                   layout:
                     type: FLEX
                     flex_flow: ROW
                     flex_align_cross: CENTER
                   widgets:
                    - label:
                        id: ico_dimbrightness_1
                        align: CENTER
                        text_font: icon_font_20
                        text_color: yellow
                        text: "\U000F00DF"
                    - slider:
                        id: slider_dimbrightness
                        value: 100
                        min_value: 20
                        max_value: 100
                        width: 230
                        height: 15
                        indicator:
                          bg_color: yellow
                          bg_grad_color: 0xcccc00
                        knob:
                          bg_color: yellow
                          bg_grad_color: 0xe6e600
                        on_value:
                          - if:
                              condition:
                                lambda: return (x != id(s_saver_brightness).state);
                              then:
                                - number.set:
                                    id: s_saver_brightness
                                    value: !lambda return x;
                                     
    - id: info_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Info"
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - label:
                  id: lbl_ip_title
                  align: CENTER
                  text_align: CENTER
                  text: "IP Address"
                  text_color: 0xFFFFFF
                  y: -70
              - label:
                  id: lbl_ip
                  align: CENTER
                  text_align: CENTER
                  text: " "
                  text_color: blue
                  y: -50
              - label:
                  id: lbl_host_title
                  align: CENTER
                  text_align: CENTER
                  text: "Host Name"
                  text_color: 0xFFFFFF
                  y: -30
              - label:
                  id: lbl_host
                  align: CENTER
                  text_align: CENTER
                  text: !lambda |-
                    char buf[30];
                    sprintf(buf, "%s", "${name}.local");
                    return buf;
                  text_color: blue
                  y: -10
              - label:
                  id: lbl_uptime_title
                  align: CENTER
                  text_align: CENTER
                  text: "Uptime D:H:M:S"
                  text_color: 0xFFFFFF
                  y: 10
              - label:
                  id: lbl_uptime
                  align: CENTER
                  text_align: CENTER
                  text: " "
                  text_color: blue
                  y: 30
              - label:
                  id: lbl_battery_title
                  align: CENTER
                  text_align: CENTER
                  text: "Battery Level"
                  text_color: 0xFFFFFF
                  y: 50
              - label:
                  id: lbl_battery
                  align: CENTER
                  text_align: CENTER
                  text: " "
                  text_color: blue
                  y: 70
                        
    - id: device_set_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Device"
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1)]
                    grid_rows: [FR(25), FR(25), FR(25), FR(25)]
                  widgets:
                    - checkbox:
                        id: chk_output_audio
                        text: "External Audio"
                        align: LEFT_MID
                        text_align: LEFT
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 0
                        grid_cell_x_align: START
                        grid_cell_y_align: CENTER
                        on_change:
                          switch.toggle: output_audio
                    - checkbox:
                        id: chk_notify_sound
                        text: "Notify Sound"
                        align: LEFT_MID
                        text_align: LEFT
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 1
                        grid_cell_x_align: START
                        grid_cell_y_align: CENTER
                        on_change:
                          switch.toggle: notify_sound
                    - checkbox:
                        id: chk_stopringonpresence
                        text: "Stop Ring on Presence"
                        align: LEFT_MID
                        text_align: LEFT
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 2
                        grid_cell_x_align: START
                        grid_cell_y_align: CENTER
              - obj:
                   align: CENTER
                   y: 75
                   bg_color: 0x000000
                   bg_opa: TRANSP
                   border_opa: TRANSP
                   width: 90%
                   height: 50
                   pad_all: 0
                   layout:
                     type: FLEX
                     flex_flow: ROW
                     flex_align_cross: CENTER
                   widgets:
                    - label:
                        id: ico_brightness_1
                        align: CENTER
                        text_font: icon_font_20
                        text_color: yellow
                        text: "\U000F00DF"
                    - slider:
                        id: slider_brightness
                        value: 100
                        min_value: 20
                        max_value: 100
                        width: 230
                        height: 15
                        indicator:
                          bg_color: yellow
                          bg_grad_color: 0xcccc00
                        knob:
                          bg_color: yellow
                          bg_grad_color: 0xe6e600
                        on_value:
                          - if:
                              condition:
                                lambda: return (x != id(s_default_brightness).state);
                              then:
                                - number.set:
                                    id: s_default_brightness
                                    value: !lambda return x;
                                    
    - id: ui_set_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "UI"
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1)]
                    grid_rows: [FR(25), FR(25), FR(25), FR(25)]
                  widgets:
                    - label:
                        text: "Time Format"
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 0
                        grid_cell_x_align: END
                        grid_cell_y_align: CENTER
                    - dropdown:
                        id: dropdown_timeformat
                        align: CENTER
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 0
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        options:
                          - 12 Hr
                          - 24 Hr
                        dropdown_list:
                          selected:
                            checked:
                              text_color: 0xFF0000
                    - label:
                        text: "Screensaver Clock"
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 1
                        grid_cell_x_align: END
                        grid_cell_y_align: CENTER
                    - dropdown:
                        id: dropdown_ssclock
                        align: CENTER
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 1
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        options:
                          - Analog
                          - Digital
                        dropdown_list:
                          selected:
                            checked:
                              text_color: 0xFF0000
                    - label:
                        text: "Temperature Unit"
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 2
                        grid_cell_x_align: END
                        grid_cell_y_align: CENTER
                    - dropdown:
                        id: dropdown_tempunit
                        align: CENTER
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 2
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        options:
                          - Celsius
                          - Fahrenheit
                        dropdown_list:
                          selected:
                            checked:
                              text_color: 0xFF0000
                        on_value:
                          - if:
                              condition:
                                lambda: return (x == 0);
                              then:
                                - select.set_index:
                                    id: temp_unit
                                    index: 0
                              else:
                                - select.set_index:
                                    id: temp_unit
                                    index: 1
                    - label:
                        text: "UI Mode"
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
                        grid_cell_column_pos: 0
                        grid_cell_row_pos: 3
                        grid_cell_x_align: END
                        grid_cell_y_align: CENTER
                    - dropdown:
                        id: dropdown_uimode
                        align: CENTER
                        grid_cell_column_pos: 1
                        grid_cell_row_pos: 3
                        grid_cell_x_align: STRETCH
                        grid_cell_y_align: STRETCH
                        options:
                          - Default
                          - HAL
                          - Home
                        dropdown_list:
                          selected:
                            checked:
                              text_color: 0xFF0000
                        on_value:
                          - delay: 1s
                          - script.execute: set_uimode

    - id: wifi_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Wifi"
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - qrcode:
                  id: lv_qr
                  align: RIGHT_MID
                  size: 100
                  x: -10
                  light_color: black
                  dark_color: white
                  text: !secret wifi_qr
              - label:
                  id: lbl_ssid_title
                  align: CENTER
                  text_align: CENTER
                  text: "SSID"
                  text_color: 0xFFFFFF
                  x: -60
                  y: -70
              - label:
                  id: lbl_ssid
                  align: CENTER
                  text_align: CENTER
                  text: " "
                  text_color: blue
                  x: -60
                  y: -50
              - label:
                  id: lbl_bssid_title
                  align: CENTER
                  text_align: CENTER
                  text: "BSSID"
                  text_color: 0xFFFFFF
                  x: -60
                  y: -30
              - label:
                  id: lbl_bssid
                  align: CENTER
                  text_align: CENTER
                  text: " "
                  text_color: blue
                  x: -60
                  y: -10
              - label:
                  id: lbl_mac_title
                  align: CENTER
                  text_align: CENTER
                  text: "MAC"
                  text_color: 0xFFFFFF
                  x: -60
                  y: 10
              - label:
                  id: lbl_mac
                  align: CENTER
                  text_align: CENTER
                  text: " "
                  text_color: blue
                  x: -60
                  y: 30
              - label:
                  id: lbl_ss_title
                  align: CENTER
                  text_align: CENTER
                  text: "Signal Strength"
                  text_color: 0xFFFFFF
                  x: -60
                  y: 50
              - label:
                  id: lbl_ss
                  align: CENTER
                  text_align: CENTER
                  text: " "
                  text_color: blue
                  x: -60
                  y: 70

    - id: alarmclock_page
      skip: true
      widgets:
        - obj:
            styles: page_content
            widgets:
              - obj:
                  align: TOP_MID
                  styles: header_footer 
                  widgets:
                    - label:
                        text: "Alarm Clock"
                        y: 5
                        align: CENTER
                        text_align: CENTER
                        text_color: 0xFFFFFF
              - obj:
                  align: CENTER
                  width: 100%
                  height: 180
                  pad_all: 6
                  bg_opa: TRANSP
                  border_opa: TRANSP
                  layout:
                    pad_row: 6
                    pad_column: 8
                    type: GRID
                    grid_columns: [FR(1), FR(1)]
                    grid_rows: [FR(99), FR(1)]
                  widgets:
                    - obj:
                         align: CENTER
                         grid_cell_column_pos: 0
                         grid_cell_row_pos: 0
                         grid_cell_x_align: CENTER
                         grid_cell_y_align: CENTER
                         bg_color: 0x000000
                         bg_opa: TRANSP
                         border_opa: TRANSP
                         width: 45%
                         height: 90%
                         pad_all: 0
                         layout:
                           type: FLEX
                           flex_flow: COLUMN
                           flex_align_cross: CENTER
                           flex_align_main: CENTER
                         widgets:
                           - button:
                               id: btn_alarmclock
                               checkable: true
                               widgets:
                                 - label:
                                     id: ico_alarmclock_1
                                     align: CENTER
                                     text_font: icon_font_55
                                     text: "\U000F0020"
                               on_value:
                                 then:
                                   - if:
                                       condition:
                                         lambda: return x;
                                       then:
                                         - lvgl.widget.show: lbl_alarmclock
                                       else:
                                         - lvgl.widget.hide: lbl_alarmclock
                           - checkbox:
                               id: chk_snoozeonceonpresence
                               text: "Presence Snooze"
                               text_font: my_font12
                               text_align: LEFT
                               text_color: 0xFFFFFF
                    - obj:
                         align: CENTER
                         grid_cell_column_pos: 1
                         grid_cell_row_pos: 0
                         grid_cell_x_align: CENTER
                         grid_cell_y_align: CENTER
                         bg_color: 0x000000
                         bg_opa: TRANSP
                         border_opa: TRANSP
                         width: 45%
                         height: 90%
                         pad_all: 0
                         layout:
                           type: FLEX
                           flex_flow: ROW
                           flex_align_cross: CENTER
                         widgets:
                           - roller:
                               align: CENTER
                               id: alarmclock_hour
                               options:
                                 - 0
                                 - 1
                                 - 2
                                 - 3
                                 - 4
                                 - 5
                                 - 6
                                 - 7
                                 - 8
                                 - 9
                                 - 10
                                 - 11
                                 - 12
                                 - 13
                                 - 14
                                 - 15
                                 - 16
                                 - 17
                                 - 18
                                 - 19
                                 - 20
                                 - 21
                                 - 22
                                 - 23
                           - roller:
                               align: CENTER
                               id: alarmclock_minutes
                               options:
                                 - "00"
                                 - "05"
                                 - 10
                                 - 15
                                 - 20
                                 - 25
                                 - 30
                                 - 35
                                 - 40
                                 - 45
                                 - 50
                                 - 55

  top_layer:
    widgets:
      - label:
          id: lbl_time
          align: TOP_LEFT
          x: 5
          y: 10
          text_font: my_font
          text_color: 0xFFFFFF
          text: ""
          on_press:
            then:
              lvgl.page.show: alarmclock_page
      - label:
          id: lbl_battery_status
          align: TOP_RIGHT
          x: -2
          y: 7
          text_font: icon_font_20
          text_color: 0xFFFFFF
          text: "\U000F0091"
      - label:
          text: "\uF1EB"
          id: lbl_wifi
          hidden: true
          align: top_right
          x: -20
          y: 7
          text_align: right
          text_color: 0xFFFFFF
          text_font: montserrat_20
          on_press:
            then:
              lvgl.page.show: wifi_page
      - label:
          id: lbl_api
          hidden: true
          align: TOP_RIGHT
          x: -44
          y: 7
          text_font: icon_font_20
          text_color: 0xFFFFFF
          text: "\U000F07D0"
      - label:
          id: lbl_mic
          align: TOP_RIGHT
          x: -64
          y: 7
          text_font: icon_font_20
          text_color: 0xFFFFFF
          text: "\U000F036C"
          on_press:
            then:
              - switch.toggle: mute_switch
      - label:
          id: lbl_alarm
          align: TOP_RIGHT
          x: -80
          y: 7
          text_font: icon_font_20
          text_color: 0xFFFFFF
          text: "\U000F099E"
          on_press:
            then:
              - lvgl.page.show: security_page
      - label:
          id: lbl_timer
          hidden: true
          align: TOP_LEFT
          x: 74
          y: 7
          text_font: icon_font_20
          text_color: 0xFFFFFF
          text: "\U000F051B"
          on_press:
            then:
              - lvgl.page.show: time_remaining_page
      - label:
          id: lbl_alarmclock
          hidden: true
          align: TOP_LEFT
          x: 54
          y: 7
          text_font: icon_font_20
          text_color: 0xFFFFFF
          text: "\U000F0020"
          on_press:
            then:
              if:
                condition:
                  switch.is_on: timer_ringing
                then:
                  - lvgl.widget.show: but_snooze
                  - lvgl.page.show: timer_finished_page
                else:
                  - lvgl.widget.hide: but_snooze
                  - lvgl.page.show: alarmclock_page
      - buttonmatrix:
          align: bottom_mid
          styles: header_footer
          pad_all: 0
          outline_width: 0
          id: top_layer
          items:
            styles: header_footer
            text_font: montserrat_20
          rows:
            - buttons:
              - id: page_prev
                text: "\uF053"
                on_press:
                  then:
                    lvgl.page.previous:
              - id: page_home
                text: "\uF015"
                on_press:
                  then:
                    lvgl.page.show: idle_page
              - id: page_settings
                text: "\uF013"
                on_press:
                  then:
                    lvgl.page.show: settings_page
              - id: page_next
                text: "\uF054"
                on_press:
                  then:
                    lvgl.page.next:
      - bar:
          id: bar_timer
          hidden: true
          align: bottom_mid          
          height: 3
          width: 100%
          y: -3
          bg_color: 0x000000
          bg_opa: TRANSP
          indicator:
            bg_color: 0x00FF00
          value: 100
          min_value: 0
          max_value: 100
      - obj:
          id: boot_screen
          x: 0
          y: 0
          width: 100%
          height: 100%
          bg_color: 0x000000
          bg_opa: COVER
          radius: 0
          pad_all: 0
          border_width: 0
          widgets:
            - image:
                align: CENTER
                src: loading_img
            - spinner:
                align: BOTTOM_MID
                y: -20
                height: 50
                width: 50
                spin_time: 1s
                arc_length: 60deg
                arc_width: 8
                indicator:
                  arc_color: 0x18bcf2
                  arc_width: 8
          on_press:
            - lvgl.widget.hide: boot_screen

  theme:
    label:
      text_font: my_font
    button:
      bg_color: 0x000000 #black
      bg_grad_color: 0x005782 #blue
      bg_grad_dir: VER
      bg_opa: COVER
      border_color: 0x000000
      border_width: 1
      text_color: 0xFFFFFF
      pressed:
        bg_color: 0x666666 #grey
        bg_grad_color: 0x00334d #dark blue
      checked:
        #bg_color: 0x1d5f96 #blue
        #bg_grad_color: 0x03324A #darker blue
        bg_color: 0x000000 #black
        bg_grad_color: 0x002233 #darker blue
        bg_grad_dir: VER
        text_color: yellow
    buttonmatrix:
      bg_opa: TRANSP
      border_color: 0x0077b3
      border_width: 0
      text_color: 0xFFFFFF
      pad_all: 0
      items:
        # bg_color: 0x1a1a1a # grey
        # bg_grad_color: 0x000000 # black
        bg_color: 0x185281
        bg_grad_color: 0x00334d
        bg_grad_dir: VER
        bg_opa: 60%
        border_color: 0x0077b3
        border_width: 1
        text_color: 0xFFFFFF
        text_font: my_font
        pressed:
          bg_color: 0x006699
          bg_grad_color: 0x00334d
        checked:
          bg_color: 0x1d5f96
          bg_grad_color: 0x03324A
          text_color: 0x005580
    switch:
      bg_color: 0xC0C0C0
      bg_grad_color: 0xb0b0b0
      bg_grad_dir: VER
      bg_opa: COVER
      checked:
        bg_color: 0x1d5f96
        bg_grad_color: 0x03324A
        bg_grad_dir: VER
        bg_opa: COVER
      knob:
        bg_color: 0xFFFFFF
        bg_grad_color: 0xC0C0C0
        bg_grad_dir: VER
        bg_opa: COVER
    slider:
      border_width: 1
      border_opa: 15%
      bg_color: 0xcccaca
      bg_opa: 15%
      indicator:
        bg_color: 0x1d5f96
        bg_grad_color: 0x03324A
        bg_grad_dir: VER
        bg_opa: COVER
      knob:
        bg_color: 0x2F8CD8
        bg_grad_color: 0x005782
        bg_grad_dir: VER
        bg_opa: COVER
        border_color: 0x0077b3
        border_width: 1
        text_color: 0xFFFFFF
  style_definitions:
    - id: header_footer
      # bg_color: 0x1a1a1a # dark
      # bg_grad_color: 0x000000 # dark
      bg_color: 0x1d5f96
      bg_grad_color: 0x004466
      bg_grad_dir: VER
      bg_opa: 60%
      border_opa: TRANSP
      radius: 0
      pad_all: 0
      pad_row: 0
      pad_column: 0
      border_color: 0x0077b3
      text_color: 0xFFFFFF
      width: 100%
      height: 30
    - id: page_content
      bg_color: 0x000000
      width: 100%
      height: 100%
      pad_all: 0
      pad_row: 0
      pad_column: 0
      border_width: 0
    - id: clock_style
      text_color: 0xFFFFFF
      text_font: my_font

binary_sensor:
###### top left hand physical button #######
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
      ignore_strapping_warning: true
    id: left_top_button
    internal: true
    on_multi_click:
      - timing:
          - ON for at least 50ms
          - OFF for at least 50ms
        then:
          - if:
              condition:
                - lvgl.page.is_showing: saver_page
              then:
                - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
                - lvgl.page.show: idle_page
                - script.execute: saver_enabled
              else:
                if:
                  condition:
                    - lvgl.page.is_showing: idle_page
                  then:
                    - script.execute: saver_enabled_manual
                  else:
                    - lvgl.page.show: idle_page
          - if:
              condition:
                - switch.is_on: timer_ringing
              then:
                - switch.turn_off: timer_ringing
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn

#######     red circle home button   ######
  - platform: gt911
    id: home_button
    index: 0
    on_press:
      - if:
          condition:
            - voice_assistant.is_running
          then:
            - switch.turn_on: mute_switch
            - voice_assistant.stop
            - switch.turn_off: mute_switch
      - if:
          condition:
            - switch.is_on: timer_ringing
          then:
            - switch.turn_off: timer_ringing
      - if:
          condition:
            - media_player.is_playing:
          then:
            - media_player.stop:
      - if:
          condition:
            - lvgl.page.is_showing: idle_page
          then:
            - script.execute: saver_enabled
          else:
            - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
            - lvgl.page.show: idle_page

###### radar sensor #####
  - platform: gpio
    pin:
      number: GPIO21
    name: "Presence detect"
    disabled_by_default: false
    device_class: "occupancy"
    trigger_on_initial_state: true
    filters:
      - delayed_off: !lambda return id(radar_delayed_off).state * 1000;
    on_state:
      - if:
          condition:
            and:
              - lambda: "return x;"
              - switch.is_on: s_saver
              - switch.is_on: s_saver_presc
          then:
            - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
            - lvgl.page.show: idle_page
            - script.execute: saver_enabled
      - if:
          condition:
            and:
              - lambda: "return x;"
              - switch.is_on: stopringonpresence
              - switch.is_on: timer_ringing
              - switch.is_off: snoozeonpresence
          then:
            - switch.turn_off: timer_ringing
      - if:
          condition:
            and:
              - lambda: "return x;"
              - switch.is_on: stopringonpresence
              - switch.is_on: timer_ringing
              - switch.is_on: snoozeonpresence
              - switch.is_on: alarmclock
              - lambda: return !id(alarmclock_ringing);
          then:
            - switch.turn_off: timer_ringing
      - if:
          condition:
            and:
              - lambda: "return x;"
              - switch.is_on: snoozeonpresence
              - lambda: return id(alarmclock_ringing);
              - switch.is_on: alarmclock
              - switch.is_on: timer_ringing
          then:
            - switch.turn_off: timer_ringing
            - script.execute: snoozealarm

##### LIGHT PAGE BINARY SENSORS #####
  # - platform: homeassistant
    # id: light1_item
    # entity_id: switch.light1 ## replace with light/switch entity to show status
    # trigger_on_initial_state: true
    # internal: true
    # on_state:
      # then:
        # - lvgl.widget.update:
            # id: but_light_1
            # state:
              # checked: !lambda return x;
        # - if:
            # condition:
              # lambda: "return x;"
            # then:
              # - lvgl.label.update:
                  # id: ico_light_1
                  # text: "\U000F06E8" # icon for light on
            # else:
              # - lvgl.label.update:
                  # id: ico_light_1
                  # text: "\U000F0335" # icon for light off

  # - platform: homeassistant
    # id: light2_item
    # entity_id: switch.light2 ## replace with light/switch entity to show status
    # trigger_on_initial_state: true
    # internal: true
    # on_state:
      # then:
        # - lvgl.widget.update:
            # id: but_light_2
            # state:
              # checked: !lambda return x;
        # - if:
            # condition:
              # lambda: "return x;"
            # then:
              # - lvgl.label.update:
                  # id: ico_light_2
                  # text: "\U000F06E8" # icon for light on
            # else:
              # - lvgl.label.update:
                  # id: ico_light_2
                  # text: "\U000F0335" # icon for light off

  # - platform: homeassistant
    # id: light3_item
    # entity_id: light.light3 ## replace with light/switch entity to show status
    # trigger_on_initial_state: true
    # internal: true
    # on_state:
      # then:
        # - lvgl.widget.update:
            # id: but_light_3
            # state:
              # checked: !lambda return x;
        # - if:
            # condition:
              # lambda: "return x;"
            # then:
              # - lvgl.label.update:
                  # id: ico_light_3
                  # text: "\U000F06E8" # icon for light on
            # else:
              # - lvgl.label.update:
                  # id: ico_light_3
                  # text: "\U000F0335" # icon for light off

  # - platform: homeassistant
    # id: light4_item
    # entity_id: switch.light4 ## replace with light/switch entity to show status
    # trigger_on_initial_state: true
    # internal: true
    # on_state:
      # then:
        # - lvgl.widget.update:
            # id: but_light_4
            # state:
              # checked: !lambda return x;
        # - if:
            # condition:
              # lambda: "return x;"
            # then:
              # - lvgl.label.update:
                  # id: ico_light_4
                  # text: "\U000F06E8" # icon for light on
            # else:
              # - lvgl.label.update:
                  # id: ico_light_4
                  # text: "\U000F0335" # icon for light off

  # - platform: homeassistant
    # id: light5_item
    # entity_id: switch.light5 ## replace with light/switch entity to show status
    # trigger_on_initial_state: true
    # internal: true
    # on_state:
      # then:
        # - lvgl.widget.update:
            # id: but_light_5
            # state:
              # checked: !lambda return x;
        # - if:
            # condition:
              # lambda: "return x;"
            # then:
              # - lvgl.label.update:
                  # id: ico_light_5
                  # text: "\U000F06E8" # icon for light on
            # else:
              # - lvgl.label.update:
                  # id: ico_light_5
                  # text: "\U000F0335" # icon for light off

  # - platform: homeassistant
    # id: light6_item
    # entity_id: light.light6 ## replace with light/switch entity to show status
    # trigger_on_initial_state: true
    # internal: true
    # on_state:
      # then:
        # - lvgl.widget.update:
            # id: but_light_6
            # state:
              # checked: !lambda return x;
        # - if:
            # condition:
              # lambda: "return x;"
            # then:
              # - lvgl.label.update:
                  # id: ico_light_6
                  # text: "\U000F06E8" # icon for light on
            # else:
              # - lvgl.label.update:
                  # id: ico_light_6
                  # text: "\U000F0335" # icon for light off
    
################## config end ############################
